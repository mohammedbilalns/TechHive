<%- include('../partials/adminheader') %>
  <div class="flex min-h-screen">
    <!-- Sidebar -->
    <%- include('../partials/adminsidebar') %>

      <!-- Main Content -->
      <main class="md:ml-64 w-full min-h-screen bg-gray-50 transition-all duration-300 ease-in-out">
        <div class="pt-14 md:pt-0 p-4">

          <div class="bg-primary-white rounded-lg shadow-lg w-full overflow-hidden pb-3">
            <!-- Page Header -->
            <div
              class="flex flex-col md:flex-row justify-between items-center bg-gray-50 px-4 md:px-6 py-4 border-b space-y-4 md:space-y-0">

              <h1 class="text-xl md:text-2xl font-semibold text-gray-800">Categories</h1>

              <div class="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
                <div class="relative w-full sm:w-auto">
                  <form action="/admin/categories" method="GET">
                    <input type="text" name="search" value="<%= locals.search || '' %>"
                      placeholder="Search categories..." onblur="this.form.submit()"
                      class="w-full border border-gray-300 rounded-md px-4 py-2 text-sm focus:ring-blue-500 focus:border-blue-500">
                  </form>
                </div>

                <button
                  class="flex items-center bg-blue-500 text-white px-4 py-2 rounded-md shadow w-full sm:w-auto justify-center"
                  onclick="addCategory()">
                  <i class="fas fa-plus mr-2"></i> Add Category
                </button>
              </div>
            </div>

            <!-- Categories Table -->
            <div class="overflow-x-auto">
              <table class="w-full table-auto bg-white">
                <thead class="text-left bg-gray-50 text-gray-600 font-semibold text-sm">
                  <tr>
                    <th class="px-4 md:px-6 py-4">#</th>
                    <th class="px-4 md:px-6 py-4">Name</th>
                    <th class="px-4 md:px-6 py-4">Status</th>
                    <th class="px-4 md:px-6 py-4 text-right">Actions</th>
                  </tr>
                </thead>
                <tbody id="categoryTableBody" class="text-gray-800 text-sm">
                  <% categories.forEach((category, index)=> { %>
                    <tr class="border-b hover:bg-gray-50">
                      <td class="px-4 md:px-6 py-4">
                        <%= (currentPage - 1) * 10 + index + 1 %>
                      </td>
                      <td class="px-4 md:px-6 py-4">
                        <%= category.name %>
                      </td>
                      <td class="px-4 md:px-6 py-4">
                        <span id="status-<%= category._id %>" class="px-4 py-2 rounded-md shadow 
                    <%= category.status === 'Active' ? 'text-green-600' : 'text-primary-accent' %>">
                          <%= category.status %>
                        </span>
                      </td>
                      <td class="px-4 md:px-6 py-4 flex gap-2 justify-end">
                        <% if (category.status==='Active' ) { %>
                          <button onclick="toggleCategoryStatus('<%= category._id %>', 'hide')"
                            class="bg-primary-accent text-white px-4 py-2 rounded-md shadow hover:bg-red-600"
                            id="toggle-<%= category._id %>">
                            Hide
                          </button>
                          <% } else { %>
                            <button onclick="toggleCategoryStatus('<%= category._id %>', 'unhide')"
                              class="bg-green-700 text-white px-4 py-2 rounded-md shadow hover:bg-green-800"
                              id="toggle-<%= category._id %>">
                              Unhide
                            </button>
                            <% } %>
                              <button class="bg-blue-500 text-white px-4 py-2 rounded-md shadow hover:bg-blue-600"
                                onclick="editCategory('<%= category._id %>', `<%= category.name %>`, `<%= category.description %>`)">
                                Edit
                              </button>

                              <button onclick="deleteCategory('<%= category._id %>')"
                                class="bg-primary-accent text-white px-4 py-2 rounded-md shadow hover:bg-red-600">
                                Delete
                              </button>
                      </td>
                    </tr>
                    <% }); %>
                </tbody>
              </table>

              <div class="pb-6"></div>

              <!-- Pagination  -->
              <% if (categories.length> 0) { %>
                <div class="mt-8 flex justify-center">
                  <div class="overflow-x-auto max-w-full">
                    <div class="flex items-center space-x-4 px-4">
                      <% if (hasPrevPage) { %>
                        <a href="/admin/categories?page=<%= currentPage - 1 %><%= search ? `&search=${search}` : '' %>"
                          class="flex-shrink-0 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200">
                          Previous
                        </a>
                        <% } %>

                          <% for(let i=1; i <=totalPages; i++) { %>
                            <a href="/admin/categories?page=<%= i %><%= search ? `&search=${search}` : '' %>"
                              class="flex-shrink-0 px-4 py-2 rounded-lg <%= currentPage === i ? 'bg-primary-accent text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200' %>">
                              <%= i %>
                            </a>
                            <% } %>

                              <% if (hasNextPage) { %>
                                <a href="/admin/categories?page=<%= currentPage + 1 %><%= search ? `&search=${search}` : '' %>"
                                  class="flex-shrink-0 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200">
                                  Next
                                </a>
                                <% } %>
                    </div>
                  </div>
                </div>
                <% } %>
            </div>
          </div>
        </div>
      </main>
  </div>

  <!-- Add Category Modal -->
  <div id="addCategoryModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg w-96">
      <h2 class="text-xl font-semibold mb-4">Add Category</h2>
      <form id="addCategoryForm" onsubmit="return false">
        <div class="mb-4">
          <label for="name" class="block text-sm font-medium text-gray-700">Category Name</label>
          <input type="text" id="name" name="name"
            class="w-full border border-gray-300 rounded-md px-4 py-2 text-sm focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter category name" />
          <p class="text-red-500 text-sm mt-1 hidden" id="nameError"></p>
        </div>
        <div class="mb-4">
          <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
          <textarea id="description" name="description" rows="5"
            class="w-full border border-gray-300 rounded-md px-4 py-2 text-sm focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter category description"></textarea>
          <p class="text-red-500 text-sm mt-1 hidden" id="descriptionError"></p>
        </div>

        <div class="flex justify-end">
          <button type="button" onclick="closeModal('addCategoryModal')"
            class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md">Cancel</button>
          <button type="submit" class="px-4 py-2 bg-primary-accent text-white rounded-md ml-2">Save</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Edit Category Modal -->
  <div id="editCategoryModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg w-96">
      <h2 class="text-xl font-semibold mb-4">Edit Category</h2>
      <form id="editCategoryForm" onsubmit="return false">
        <input type="hidden" id="editCategoryId" name="id" />
        <div class="mb-4">
          <label for="editCategoryName" class="block text-sm font-medium text-gray-700">Category Name</label>
          <input type="text" id="editCategoryName" name="name"
            class="w-full border border-gray-300 rounded-md px-4 py-2 text-sm focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter category name" />
          <p class="text-red-500 text-sm mt-1 hidden" id="editCategoryNameError"></p>
        </div>
        <div class="mb-4">
          <label for="editCategoryDescription" class="block text-sm font-medium text-gray-700">Description</label>
          <textarea id="editCategoryDescription" name="description" rows="5"
            class="w-full border border-gray-300 rounded-md px-4 py-2 text-sm focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter category description"></textarea>
          <p class="text-red-500 text-sm mt-1 hidden" id="editCategoryDescriptionError"></p>
        </div>

        <div class="flex justify-end">
          <button type="button" onclick="closeModal('editCategoryModal')"
            class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md">Cancel</button>
          <button type="submit" class="px-4 py-2 bg-primary-accent text-white rounded-md ml-2">Save Changes</button>
        </div>
      </form>
    </div>
  </div>

  <script>

    // show add category modal
    async function addCategory() {
      openModal('addCategoryModal');
    }

    // show edit category modal with data 
    function editCategory(categoryId, categoryName, categoryDescription) {
      const form = document.getElementById('editCategoryForm');
      form.action = `/admin/categories/edit/${categoryId}`;

      // set the category id in the hidden input field
      document.getElementById('editCategoryId').value = categoryId;
      document.getElementById('editCategoryName').value = categoryName;
      document.getElementById('editCategoryDescription').value = categoryDescription;
      openModal('editCategoryModal');
    }


    // function to open the modal
    function openModal(modalId) {
      document.getElementById(modalId).classList.replace('hidden', 'flex');
    }

    // function to close the modal
    function closeModal(modalId) {
      document.getElementById(modalId).classList.replace('flex', 'hidden');
    }

    // form validations 
    function validateCategoryForm(nameId, descriptionId, alertId) {
      const name = document.getElementById(nameId).value.trim();
      const description = document.getElementById(descriptionId).value.trim();
      let isValid = true;

      // Reset previous errors
      resetErrors(nameId, descriptionId);

      if (!name) {
        showError(nameId, 'Category Name is required');
        isValid = false;
      } else if (name.length < 3 || name.length > 50) {
        showError(nameId, 'Category Name must be between 3-50 characters');
        isValid = false;
      } else if (/[^a-zA-Z\s&,]/.test(name)) {
        showError(nameId, 'Category Name can only contain letters, spaces, & and , symbols');
        isValid = false;
      } else if (/^[&,\s]+$/.test(name)) {
        showError(nameId, 'Category Name cannot consist of only symbols');
        isValid = false;
      }

      if (!description) {
        showError(descriptionId, 'Description is required');
        isValid = false;
      } else if (description.length < 10 || description.length > 100) {
        showError(descriptionId, 'Description must be between 10-100 characters');
        isValid = false;
      } else if (/[^a-zA-Z0-9\s.,'&,\/-]/.test(description)) {
        showError(descriptionId, 'Description can only contain letters, numbers, spaces, and the following characters: . , \' & / -');
        isValid = false;
      } else if (/^[.,'&,\/-\s]+$/.test(description)) {
        showError(descriptionId, 'Description cannot consist of only symbols');
        isValid = false;
      }

      return isValid;
    }

    function showError(fieldId, message) {
      const input = document.getElementById(fieldId);
      const errorElement = document.getElementById(`${fieldId}Error`);

      input.classList.add('border-red-500');
      errorElement.textContent = message;
      errorElement.classList.remove('hidden');
    }

    function resetErrors(nameId, descriptionId) {
      const fields = [nameId, descriptionId];
      fields.forEach(field => {
        const input = document.getElementById(field);
        const errorElement = document.getElementById(`${field}Error`);

        input.classList.remove('border-red-500');
        errorElement.classList.add('hidden');
        errorElement.textContent = '';
      });
    }

    function validateAddCategoryForm() {
      return validateCategoryForm('name', 'description', 'alertMessageAdd');
    }

    function validateEditCategoryForm() {
      return validateCategoryForm('editCategoryName', 'editCategoryDescription', 'alertMessageEdit');
    }

    async function toggleCategoryStatus(categoryId, action) {
      const confirmed = await customConfirm(
        `Are you sure you want to ${action} this category?`,
        `${action === 'hide' ? 'Hide' : 'Unhide'} Category`
      );

      if (confirmed) {
        try {
          const response = await axios.post(`/admin/categories/${action}/${categoryId}`);

          if (response.data.success) {
            // Get references to elements
            const statusSpan = document.getElementById(`status-${categoryId}`);
            const toggleButton = document.getElementById(`toggle-${categoryId}`);

            if (action === 'hide') {
              statusSpan.textContent = 'Inactive';
              statusSpan.className = 'px-4 py-2 rounded-md shadow text-primary-accent';

              toggleButton.textContent = 'Unhide';
              toggleButton.className = 'bg-green-500 text-white px-4 py-2 rounded-md shadow hover:bg-green-600';
              toggleButton.onclick = () => toggleCategoryStatus(categoryId, 'unhide');
            } else {
              statusSpan.textContent = 'Active';
              statusSpan.className = 'px-4 py-2 rounded-md shadow text-green-600';

              toggleButton.textContent = 'Hide';
              toggleButton.className = 'bg-primary-accent text-white px-4 py-2 rounded-md shadow hover:bg-red-600';
              toggleButton.onclick = () => toggleCategoryStatus(categoryId, 'hide');
            }

            showToast(`Category ${action === 'hide' ? 'hidden' : 'unhidden'} successfully`);
          }
        } catch (error) {
          console.error('Error:', error);
          showToast(error.response?.data?.message || `Failed to ${action} category`, 'error');
        }
      }
    }

    async function submitAddCategory(event) {
      event.preventDefault();

      if (!validateAddCategoryForm()) return;

      try {
        const formData = {
          name: document.getElementById('name').value,
          description: document.getElementById('description').value
        };

        const response = await axios.post('/admin/categories/new', formData);

        if (response.data.success) {
          // Create new row with the returned category data
          const category = response.data.category;
          const tbody = document.getElementById('categoryTableBody');
          const rowCount = tbody.children.length;

          const newRow = `
                <tr class="border-b hover:bg-gray-50">
                    <td class="px-4 md:px-6 py-4">${rowCount + 1}</td>
                    <td class="px-4 md:px-6 py-4">${category.name}</td>
                    <td class="px-4 md:px-6 py-4">
                        <span id="status-${category._id}" class="px-4 py-2 rounded-md shadow text-green-600">
                            Active
                        </span>
                    </td>
                    <td class="px-4 md:px-6 py-4 flex gap-2 justify-end">
                        <button
                            onclick="toggleCategoryStatus('${category._id}', 'hide')"
                            class="bg-primary-accent text-white px-4 py-2 rounded-md shadow hover:bg-red-600"
                            id="toggle-${category._id}"
                        >
                            Hide
                        </button>
                        <button
                            class="bg-blue-500 text-white px-4 py-2 rounded-md shadow hover:bg-blue-600"
                            onclick="editCategory('${category._id}', '${category.name}', '${category.description}')"
                        >
                            Edit
                        </button>
                        <button
                            onclick="deleteCategory('${category._id}')"
                            class="bg-primary-accent text-white px-4 py-2 rounded-md shadow hover:bg-red-600"
                        >
                            Delete
                        </button>
                    </td>
                </tr>
            `;
          tbody.insertAdjacentHTML('beforeend', newRow);

          // Clear form and close modal
          document.getElementById('addCategoryForm').reset();
          closeModal('addCategoryModal');
          // Show success message
          showToast('Category added successfully');
        }
      } catch (error) {
        console.error('Error:', error);
        showToast(error.response?.data?.message || 'Failed to add category', 'error');
      }
    }

    async function submitEditCategory(event) {
      event.preventDefault();

      if (!validateEditCategoryForm()) return;

      const categoryId = document.getElementById('editCategoryId').value;

      try {
        const formData = {
          name: document.getElementById('editCategoryName').value,
          description: document.getElementById('editCategoryDescription').value
        };

        const response = await axios.post(`/admin/categories/edit/${categoryId}`, formData);

        if (response.data.success) {
          const category = response.data.category;

          // Update the category name in the table
          const row = document.querySelector(`#toggle-${categoryId}`).closest('tr');
          row.children[1].textContent = category.name;

          // Update the onclick handler of the Edit button with new values
          const editButton = row.querySelector('button.bg-blue-500');
          editButton.setAttribute('onclick', `editCategory('${categoryId}', '${category.name}', '${category.description}')`);

          // Close modal and show success message
          closeModal('editCategoryModal');
          showToast('Category updated successfully');
        }
      } catch (error) {
        console.error('Error:', error);
        showToast(error.response?.data?.message || 'Failed to update category', 'error');
      }
    }

    //  delete category function
    async function deleteCategory(id) {
      const confirmed = await customConfirm(
        'Are you sure you want to delete this category?',
        'Delete Category'
      );

      if (confirmed) {
        try {
          const response = await axios.delete(`/admin/categories/${id}`);

          if (response.data.success) {
            const row = document.querySelector(`#toggle-${id}`).closest('tr');
            row.remove();

            showToast('Category deleted successfully');

            // Update the row numbers
            const rows = document.querySelectorAll('#categoryTableBody tr');
            rows.forEach((row, index) => {
              row.children[0].textContent = index + 1;
            });
          } else {
            showToast('Failed to delete category', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showToast(error.response?.data?.message || 'Failed to delete category', 'error');
        }
      }
    }

    // form onsubmit handlers 
    document.getElementById('addCategoryForm').onsubmit = submitAddCategory;
    document.getElementById('editCategoryForm').onsubmit = submitEditCategory;

    //  input event listeners to clear errors when user starts typing
    document.addEventListener('DOMContentLoaded', function () {
      const addFields = ['name', 'description'];
      const editFields = ['editCategoryName', 'editCategoryDescription'];

      [...addFields, ...editFields].forEach(field => {
        document.getElementById(field).addEventListener('input', function () {
          this.classList.remove('border-red-500');
          document.getElementById(`${field}Error`).classList.add('hidden');
        });
      });
    });

  </script>

  <%- include('../partials/adminfooter') %>