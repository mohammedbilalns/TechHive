<%- include('../partials/adminheader') %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<div class="flex min-h-screen">
  <!-- Sidebar -->
  <%- include('../partials/adminsidebar') %>

  <!-- Main Content -->
  <main class="md:ml-64 w-full min-h-screen bg-gray-50 transition-all duration-300 ease-in-out">
    <div class="pt-14 md:pt-0 p-4">
      <!-- Breadcrumbs -->
      <nav class="flex mb-4 text-sm">
        <a href="/admin/products" class="text-gray-500 hover:text-red-600">Products</a>
        <span class="mx-2 text-gray-500">/</span>
        <span class="text-gray-800">Edit Product</span>
      </nav>

      <h1 class="text-2xl font-bold text-gray-800">Edit Product</h1>
      
      <!-- Add Product Form -->
      <div id="productFormContainer" class="bg-white shadow-lg rounded-lg p-8 mt-4">
        <form id="addProductForm" action=/admin/products/edit/<%= product._id %> method="POST" enctype="multipart/form-data">
          <!-- Product Name -->
          <div class="form-group mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Product Name</label>
            <input type="text" name="name" value="<%= product.name %>" class="w-full h-12 px-4 py-2 text-base rounded-lg border border-gray-300 focus:border-blue-500" placeholder="Enter product name">
          </div>
          
          <!-- Product Description -->
          <div class="form-group mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Product Description</label>
            <textarea name="description" class="w-full h-24 px-4 py-2 text-base rounded-lg border border-gray-300 focus:border-blue-500" placeholder="Enter product description"><%= product.description %></textarea>
          </div>
          
          <!-- Price -->
          <div class="form-group mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Price</label>
            <input type="number" name="price" value="<%= product.price %>" class="w-full h-12 px-4 py-2 text-base rounded-lg border border-gray-300 focus:border-blue-500" placeholder="Enter product price" step="0.01">
          </div>
          
          <!-- Stock -->
          <div class="form-group mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Stock</label>
            <input type="number" value="<%= product.stock %>" name="stock" class="w-full h-12 px-4 py-2 text-base rounded-lg border border-gray-300 focus:border-blue-500" placeholder="Enter stock quantity" min="0">
          </div>
          
          <!-- Brand -->
          <div class="form-group mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Brand</label>
            <input type="text" value="<%= product.brand %>" name="brand" class="w-full h-12 px-4 py-2 text-base rounded-lg border border-gray-300 focus:border-blue-500" placeholder="Enter brand name">
          </div>
          
          <!-- Category -->
          <div class="form-group mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
            <select name="category" class="w-full h-12 px-4 py-2 rounded-lg border border-gray-300 focus:border-blue-500">
              <option value="">Select Category</option>
              <% categories.forEach(category => { %>
                <option value="<%= category._id %>" <%= category._id.toString() === product.category.toString() ? 'selected' : '' %>>
                  <%= category.name %>
                </option>
              <% }); %>
            </select>
          </div>
          
          <!-- Specifications -->
          <div class="form-group mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Specifications (up to 4)</label>
            <div class="space-y-2">
              <% for(let i = 0; i < 4; i++) { %>
                <input type="text" 
                       name="specifications" 
                       value="<%= product.specifications[i] || '' %>"
                       class="w-full h-12 px-4 py-2 text-base rounded-lg border border-gray-300 focus:border-blue-500" 
                       placeholder="Enter specification <%= i+1 %>">
              <% } %>
            </div>
            <small class="text-gray-500">Add up to 4 key specifications for the product</small>
          </div>
          
          <!-- Main Image -->
          <div class="form-group mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Images</label>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <% for(let i = 0; i < 4; i++) { %>
                <div class="w-full">
                  <label class="block">
                    <input type="file" 
                           name="mainImages"
                           id="imageInput<%= i+1 %>"
                           accept="image/*" 
                           class="hidden" 
                           onchange="handleImageUpload(this, 'preview<%= i+1 %>', 'uploadLabel<%= i+1 %>', 'cropperModal', 'cropperImage')">
                    <span id="uploadLabel<%= i+1 %>" class="<%= product.images && product.images[i] ? 'hidden' : 'flex' %> items-center justify-center h-20 w-20 border border-gray-300 bg-white text-gray-800 cursor-pointer hover:bg-gray-100 transition duration-200 ease-in-out">
                      <i class="fas fa-plus text-3xl"></i>
                    </span>
                  </label>
                  <div id="preview<%= i+1 %>" class="mt-2 <%= product.images && product.images[i] ? '' : 'hidden' %>">
                    <% if (product.images && product.images[i]) { %>
                      <img src="/uploads/products/<%= product.images[i].filename %>" 
                           alt="Preview <%= i+1 %>" 
                           class="h-20 w-20 object-cover rounded cursor-pointer hover:opacity-75 transition-opacity"
                           onclick="document.getElementById('imageInput<%= i+1 %>').click()">
                      <input type="hidden" name="existingImages" value="<%= product.images[i].filename %>">
                    <% } %>
                  </div>
                </div>
              <% } %>
            </div>
            <small class="text-gray-500">Click on any image to replace it. You can update individual images or keep existing ones.</small>
          </div> 
     <!-- Error Message -->
     <div id="alertMessage" class="mb-4 p-3 rounded-md hidden bg-red-100 text-red-700">
      <span id="alertText"></span>
    </div>

    <!-- update Product Button -->
    <div id="addProductButtonContainer" class="flex justify-end mt-6">
      <button type="submit" form="addProductForm" class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Update Product</button>
    </div>
  </div>


        </form>

     
      <!-- Cropper Modal -->
      <div id="cropperModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 max-w-2xl w-full mx-4">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">Crop Image</h3>
            <button onclick="closeCropper()" class="text-gray-500 hover:text-gray-700">
              <i class="fas fa-times"></i>
            </button>
          </div>
          <div class="relative aspect-square mb-4">
            <img id="cropperImage" src="#" class="max-w-full">
          </div>
          <div class="flex justify-end gap-3">
            <button onclick="closeCropper()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300">Cancel</button>
            <button class="apply-button px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600" onclick="applyCrop()">Apply</button>
          </div>
        </div>
      </div>

      <script>
        document.addEventListener("DOMContentLoaded", () => {
          const addProductForm = document.getElementById("addProductForm");
          let cropper;
          let currentImageInput;
          let currentPreviewId;
          let currentUploadLabelId;

          function handleImageUpload(input, previewId, uploadLabelId, modalId, cropperImageId) {
            if (input.files && input.files[0]) {
              const reader = new FileReader();
              currentImageInput = input;
              currentPreviewId = previewId;
              currentUploadLabelId = uploadLabelId;
              
              reader.onload = function(e) {
                const cropperImg = document.getElementById(cropperImageId);
                cropperImg.src = e.target.result;
                
                // Show the cropper modal
                document.getElementById(modalId).style.display = 'flex';
                
                if (cropper) {
                  cropper.destroy();
                }
                
                cropper = new Cropper(cropperImg, {
                  aspectRatio: 1,
                  viewMode: 1,
                  autoCropArea: 1,
                  background: false,
                  zoomable: true,
                  scalable: true
                });
              };
              
              reader.readAsDataURL(input.files[0]);
            }
          }

          function closeCropper() {
            document.getElementById("cropperModal").style.display = 'none';
            if (cropper) {
              cropper.destroy();
              cropper = null;
            }
          }

          function applyCrop() {
            if (cropper) {
              const canvas = cropper.getCroppedCanvas();
              canvas.toBlob((blob) => {
                const file = new File([blob], "croppedImage.png", { type: "image/png" });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                currentImageInput.files = dataTransfer.files;

                // Update preview
                const previewContainer = document.getElementById(currentPreviewId);
                const previewImg = previewContainer.querySelector('img') || document.createElement('img');
                if (!previewContainer.querySelector('img')) {
                  previewImg.classList.add('h-20', 'w-20', 'object-cover', 'rounded', 'cursor-pointer', 'hover:opacity-75', 'transition-opacity');
                  previewImg.onclick = () => currentImageInput.click();
                  previewContainer.appendChild(previewImg);
                }
                previewImg.src = canvas.toDataURL();
                
                // Show preview, hide upload label
                previewContainer.classList.remove('hidden');
                const uploadLabel = document.getElementById(currentUploadLabelId);
                if (uploadLabel) {
                  uploadLabel.classList.add('hidden');
                }
                
                closeCropper();
              });
            }
          }

          const alertMessage = document.getElementById("alertMessage");
          const alertText = document.getElementById("alertText");

          addProductForm.addEventListener("submit", async (event) => {
            event.preventDefault();
            let isValid = true;

            const name = addProductForm.name.value.trim();
            const brand = addProductForm.brand.value.trim();
            const description = addProductForm.description.value.trim();
            const price = addProductForm.price.value.trim();
            const stock = addProductForm.stock.value.trim();
            const category = addProductForm.category.value.trim();
            const specifications = Array.from(addProductForm.querySelectorAll('input[name="specifications"]')).map(input => input.value.trim());

            // Define minimum and maximum lengths for name and brand only
            const nameBrandMinLength = 2;
            const nameBrandMaxLength = 100;

            // Validate required fields first
            if (!name) {
              showToast("Product name is required.", "error");
              isValid = false;
            } else if (name.length < nameBrandMinLength || name.length > nameBrandMaxLength) {
              showToast(`Product name must be between ${nameBrandMinLength} and ${nameBrandMaxLength} characters.`, "error");
              isValid = false;
            } else if (!brand) {
              showToast("Brand is required.", "error");
              isValid = false;
            } else if (brand.length < nameBrandMinLength || brand.length > nameBrandMaxLength) {
              showToast(`Brand must be between ${nameBrandMinLength} and ${nameBrandMaxLength} characters.`, "error");
              isValid = false;
            } else if (!description || description.replace(/\s/g, '').length === 0) {
              showToast("Product description is required and cannot be only spaces.", "error");
              isValid = false;
            } else if (!category) {
              showToast("Please select a category.", "error");
              isValid = false;
            } else if (!price) {
              showToast("Price is required.", "error");
              isValid = false;
            } else if (!stock) {
              showToast("Stock is required.", "error");
              isValid = false;
            }

            // Validate specifications
            if (isValid) {
              const invalidSpecs = specifications.some(spec => !spec || spec.replace(/\s/g, '').length === 0);
              if (invalidSpecs) {
                showToast("All four specifications are required and cannot be only spaces.", "error");
                isValid = false;
              }
            }

            // Validate text fields for allowed characters
            if (isValid) {
              const nameRegex = /^[A-Za-z0-9\s()%]+$/;
              const brandRegex = /^[A-Za-z0-9\s]+$/;

              if (!nameRegex.test(name)) {
                showToast("Product name can only contain letters, numbers, spaces, parentheses () and % symbol.", "error");
                isValid = false;
              } else if (!brandRegex.test(brand)) {
                showToast("Brand can only contain letters, numbers, and spaces.", "error");
                isValid = false;
              }
            }

            // Validate numeric fields
            if (isValid) {
              if (parseFloat(price) < 50) {
                showToast("Price must be at least ₹50.", "error");
                isValid = false;
              } else if (parseInt(stock) < 0) {
                showToast("Stock cannot be negative.", "error");
                isValid = false;
              }
            }

            if (!isValid) {
              return;
            }

            try {
              const formData = new FormData(addProductForm);
              const productId = window.location.pathname.split('/').pop();
              const response = await axios.post(`/admin/products/edit/${productId}`, formData, {
                headers: {
                  'Content-Type': 'multipart/form-data'
                }
              });

              if (response.data.success) {
                showToast('Product updated successfully');
                setTimeout(() => {
                  window.location.href = '/admin/products';
                }, 1000);
              } else {
                showToast(response.data.message || 'Failed to update product', 'error');
              }
            } catch (error) {
              console.error('Error:', error);
              showToast(error.response?.data?.message || 'Failed to update product', 'error');
            }
          });

          window.handleImageUpload = handleImageUpload;
          window.closeCropper = closeCropper;
          window.applyCrop = applyCrop;
        });
      </script>
    </div>
  </main>
</div>
<%- include('../partials/adminfooter') %>