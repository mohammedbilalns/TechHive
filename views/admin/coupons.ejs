<%- include('../partials/adminheader') %>

<div class="flex min-h-screen">
  <!-- Sidebar -->
  <%- include('../partials/adminsidebar') %>

  <!-- Main Content -->
  <main class="md:ml-64 w-full min-h-screen bg-gray-50 transition-all duration-300 ease-in-out">
    <div class="pt-14 md:pt-0 p-4">
      <% if (locals.message && locals.alertType) { %>
        <div id="alertMessage" class="mb-4 p-3 rounded-md 
         <%= alertType === 'error' ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700' %>">
          <%= message %>
        </div>
      <% } %>

      <div class="bg-primary-white rounded-lg shadow-lg w-full overflow-hidden">
        <!-- Page Header -->
        <div class="flex flex-col md:flex-row justify-between items-center bg-gray-50 px-4 md:px-6 py-4 border-b space-y-4 md:space-y-0">
          <h1 class="text-xl md:text-2xl font-semibold text-gray-800">Coupons</h1>
          <div class="flex gap-4">
          
            <button class="flex items-center bg-blue-500 text-white px-4 py-2 rounded-md shadow w-full md:w-auto justify-center"
              onclick="addCoupon()">
              <i class="fas fa-plus mr-2"></i> Add Coupon
            </button>
          </div>
        </div>

        <!-- Coupons Table -->
        <div class="overflow-x-auto">
          <table class="min-w-full bg-white">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">#</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Code</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Min Purchase</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expiry</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="couponsTable">
              <% coupons.forEach((coupon, index) => { %>
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap"><%= (currentPage - 1) * 10 + index + 1 %></td>
                  <td class="px-6 py-4 whitespace-nowrap"><%= coupon.code %></td>
                  <td class="px-6 py-4 whitespace-nowrap"><%= coupon.discountType %></td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <%= coupon.discountType === 'PERCENTAGE' ? coupon.discountValue + '%' : '₹' + coupon.discountValue %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">₹<%= coupon.minPurchase %></td>
                  <td class="px-6 py-4 whitespace-nowrap"><%= new Date(coupon.expiryDate).toLocaleDateString() %></td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <% if (coupon.isExpired) { %>
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                            Expired
                        </span>
                    <% } else { %>
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                            <%= coupon.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %>">
                            <%= coupon.isActive ? 'Active' : 'Inactive' %>
                        </span>
                    <% } %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div class="flex space-x-2">
                      <button onclick="editCoupon('<%= coupon._id %>')"
                        class="bg-blue-500 text-white px-3 py-2 rounded-md hover:bg-blue-600">
                        Edit
                      </button>
                      <% if (!coupon.isExpired) { %>
                        <button onclick="toggleCouponStatus('<%= coupon._id %>', '<%= coupon.isActive %>')"
                          class="<%= coupon.isActive ? 'bg-primary-accent' : 'bg-green-700' %> text-white px-3 py-2 rounded-md hover:<%= coupon.isActive ? 'bg-red-600' : 'bg-green-800' %>">
                          <%= coupon.isActive ? 'Deactivate' : 'Activate' %>
                        </button>
                      <% } %>
                      <button onclick="deleteCoupon('<%= coupon._id %>')"
                        class="bg-primary-accent text-white px-3 py-2 rounded-md hover:bg-red-600">
                        Delete
                      </button>
                    </div>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>

        <!-- Pagination -->
        <% if (coupons.length > 0) { %>
          <div class="px-6 py-4 flex justify-center">
            <nav class="flex space-x-2">
              <% if (hasPrevPage) { %>
                <a href="/admin/coupons?page=<%= currentPage - 1 %>" class="px-3 py-1 rounded-md bg-primary-accent text-white hover:bg-red-600">Previous</a>
              <% } %>
              
              <% for(let i = 1; i <= totalPages; i++) { %>
                <a href="/admin/coupons?page=<%= i %>" 
                  class="px-3 py-1 rounded-md <%= currentPage === i ? 'bg-primary-accent text-white' : 'bg-primary-accent text-white hover:bg-red-600' %>">
                  <%= i %>
                </a>
              <% } %>
              
              <% if (hasNextPage) { %>
                <a href="/admin/coupons?page=<%= currentPage + 1 %>" class="px-3 py-1 rounded-md bg-primary-accent text-white hover:bg-red-600">Next</a>
              <% } %>
            </nav>
          </div>
        <% } %>
      </div>
    </div>
  </main>
</div>

<!-- Add/Edit Coupon Modal -->
<div id="couponModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full items-center justify-center">
  <div class="relative mx-auto p-5 border w-[800px] shadow-lg rounded-md bg-white max-h-[90vh] overflow-y-auto">
    <div class="mt-3">
      <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4" id="modalTitle">Add New Coupon</h3>
      <form id="couponForm" class="mt-4">
        <input type="hidden" id="couponId">
        
        <!-- Two column layout -->
        <div class="grid grid-cols-2 gap-4">
          <!-- Left Column -->
          <div>
            <div class="mb-4">
              <label class="block text-gray-700 text-sm font-bold mb-2" for="code">
                Coupon Code <span class="text-red-500">*</span>
                <span class="text-gray-500 text-xs font-normal">(Letters and numbers only, max 10 characters)</span>
              </label>
              <input type="text" id="code" name="code" required maxlength="10" pattern="^[A-Za-z0-9]+$"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Example: SUMMER24">
            </div>

            <div class="mb-4">
              <label class="block text-gray-700 text-sm font-bold mb-2" for="description">
                Description <span class="text-red-500">*</span>
                <span class="text-gray-500 text-xs font-normal">(10-100 characters)</span>
              </label>
              <textarea id="description" name="description" required minlength="10" maxlength="100" rows="2"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Example: Get 20% off on all summer collection items"></textarea>
              <span id="descriptionCount" class="text-xs text-gray-500">0/100</span>
            </div>

            <div class="mb-4">
              <label class="block text-gray-700 text-sm font-bold mb-2" for="discountType">
                Discount Type <span class="text-red-500">*</span>
              </label>
              <select id="discountType" name="discountType" required onchange="updateDiscountValidation()"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                <option value="PERCENTAGE">Percentage</option>
                <option value="FIXED">Fixed Amount</option>
              </select>
            </div>

            <div class="mb-4">
              <label class="block text-gray-700 text-sm font-bold mb-2" for="discountValue">
                Discount Value <span class="text-red-500">*</span>
                <span id="discountValueHint" class="text-gray-500 text-xs font-normal">(1-99 for percentage)</span>
              </label>
              <input type="number" id="discountValue" name="discountValue" required min="1" max="99"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Example: 20">
            </div>

            <div class="mb-4">
              <label class="block text-gray-700 text-sm font-bold mb-2" for="minPurchase">
                Minimum Purchase Amount <span class="text-red-500">*</span>
              </label>
              <input type="number" id="minPurchase" name="minPurchase" required min="0"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Example: 1000">
            </div>
          </div>

          <!-- Right Column -->
          <div>
            <div class="mb-4">
              <label class="block text-gray-700 text-sm font-bold mb-2" for="maxDiscount">
                Maximum Discount Amount <span class="text-red-500">*</span>
                <span class="text-gray-500 text-xs font-normal">(Minimum ₹100)</span>
              </label>
              <input type="number" id="maxDiscount" name="maxDiscount" required 
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Example: 2000">
            </div>

            <div class="mb-4">
              <label class="block text-gray-700 text-sm font-bold mb-2" for="usageLimit">
                Usage Limit Per User <span class="text-red-500">*</span>
              </label>
              <input type="number" id="usageLimit" name="usageLimit" required min="1"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Example: 1">
            </div>

            <div class="mb-4">
              <label class="block text-gray-700 text-sm font-bold mb-2" for="startDate">
                Start Date <span class="text-red-500">*</span>
              </label>
              <input type="datetime-local" id="startDate" name="startDate" required
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>

            <div class="mb-4">
              <label class="block text-gray-700 text-sm font-bold mb-2" for="expiryDate">
                Expiry Date <span class="text-red-500">*</span>
              </label>
              <input type="datetime-local" id="expiryDate" name="expiryDate" required
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
          </div>
        </div>

        <!-- Form Actions -->
        <div class="flex items-center justify-end mt-6 gap-4">
          <button type="button" onclick="closeModal()"
            class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
            Cancel
          </button>
          <button type="submit"
            class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
            Save
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>


  function addCoupon() {
    document.getElementById('modalTitle').textContent = 'Add New Coupon';
    document.getElementById('couponForm').reset();
    document.getElementById('couponId').value = '';
    updateDiscountValidation();
    openModal();
  }

  function openModal() {
    document.getElementById('couponModal').classList.replace("hidden", "flex");
  }

  function closeModal() {
    document.getElementById('couponModal').classList.replace("flex","hidden");
  }

  async function editCoupon(couponId) {
    try {
      const response = await axios.get(`/admin/coupons/${couponId}`);
      const coupon = response.data.coupon;

      document.getElementById('modalTitle').textContent = 'Edit Coupon';
      document.getElementById('couponId').value = couponId;
      document.getElementById('code').value = coupon.code;
      document.getElementById('description').value = coupon.description;
      document.getElementById('discountType').value = coupon.discountType;
      document.getElementById('discountValue').value = coupon.discountValue;
      document.getElementById('minPurchase').value = coupon.minPurchase;
      document.getElementById('maxDiscount').value = coupon.maxDiscount || '';
      document.getElementById('usageLimit').value = coupon.usageLimit;
      document.getElementById('startDate').value = new Date(coupon.startDate).toISOString().slice(0, 16);
      document.getElementById('expiryDate').value = new Date(coupon.expiryDate).toISOString().slice(0, 16);

      updateDiscountValidation();
      document.getElementById('descriptionCount').textContent = `${coupon.description.length}/100`;

      openModal();
    } catch (error) {
      showToast(error.response?.data?.message || 'Failed to fetch coupon details', 'error');
    }
  }

  document.getElementById('couponForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const couponId = document.getElementById('couponId').value;
    const code = document.getElementById('code').value.toUpperCase();
    
    // Validate coupon code
    if (!/^[A-Z0-9]+$/.test(code)) {
        showToast('Coupon code can only contain letters and numbers', 'error');
        return;
    }

    // Validate dates
    const startDate = new Date(document.getElementById('startDate').value);
    const expiryDate = new Date(document.getElementById('expiryDate').value);

    if (expiryDate <= startDate) {
        showToast('Expiry date must be after start date', 'error');
        return;
    }

    // Validate discount value
    const discountType = document.getElementById('discountType').value;
    const discountValue = Number(document.getElementById('discountValue').value);
    
    if (discountType === 'PERCENTAGE') {
        if (discountValue < 1 || discountValue > 99) {
            showToast('Percentage discount must be between 1 and 99', 'error');
            return;
        }
        // Validate maximum discount for percentage type
        const maxDiscount = Number(document.getElementById('maxDiscount').value);
        if (maxDiscount < 100) {
            showToast('Maximum discount amount must be at least ₹100', 'error');
            return;
        }
    }

    const formData = {
        code: code,
        description: document.getElementById('description').value,
        discountType: discountType,
        discountValue: discountValue,
        minPurchase: document.getElementById('minPurchase').value,
        maxDiscount: discountType === 'PERCENTAGE' ? document.getElementById('maxDiscount').value : 0,
        usageLimit: document.getElementById('usageLimit').value,
        startDate: startDate.toISOString(),
        expiryDate: expiryDate.toISOString()
    };

    try {
        const response = await axios[couponId ? 'put' : 'post'](
            couponId ? `/admin/coupons/${couponId}` : '/admin/coupons',
            formData
        );

        if (response.data.success) {
            closeModal();
            
            if (couponId) {
                // Update existing row in the table
                const row = document.querySelector(`button[onclick="editCoupon('${couponId}')"]`).closest('tr');
                const isExpired = new Date(formData.expiryDate) < new Date();
                
                // Update the row cells
                row.children[1].textContent = formData.code;
                row.children[2].textContent = formData.discountType;
                row.children[3].textContent = formData.discountType === 'PERCENTAGE' ? 
                    formData.discountValue + '%' : '₹' + formData.discountValue;
                row.children[4].textContent = '₹' + formData.minPurchase;
                row.children[5].textContent = new Date(formData.expiryDate).toLocaleDateString();
                
                // Update status cell
                const statusCell = row.children[6];
                if (isExpired) {
                    statusCell.innerHTML = `
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                            Expired
                        </span>`;
                }
                
                showToast('Coupon updated successfully');
            } else {
                // For new coupons, handle as before
                const tbody = document.getElementById('couponsTable');
                const newRow = createCouponRow(formData, response.data.couponId);
                
                if (tbody.querySelector('td[colspan="8"]')) {
                    tbody.innerHTML = newRow;
                } else {
                    tbody.insertAdjacentHTML('afterbegin', newRow);
                    updateRowNumbers();
                }
                
                showToast('Coupon added successfully');
            }
        }
    } catch (error) {
        showToast(error.response?.data?.message || 'Failed to save coupon', 'error');
    }
  });

  async function toggleCouponStatus(couponId, currentStatus) {
    const action = currentStatus === 'true' ? 'deactivate' : 'activate';
    const confirmed = await customConfirm(
        `Are you sure you want to ${action} this coupon?`,
        `${action.charAt(0).toUpperCase() + action.slice(1)} Coupon`
    );

    if (confirmed) {
        try {
            const response = await axios.patch(`/admin/coupons/${couponId}/toggle-status`);
            if (response.data.success) {
                const row = document.querySelector(`button[onclick="toggleCouponStatus('${couponId}', '${currentStatus}')"]`).closest('tr');
                const statusCell = row.querySelector('td:nth-child(7)');
                const toggleButton = row.querySelector(`button[onclick="toggleCouponStatus('${couponId}', '${currentStatus}')"]`);
                
                // Update status cell
                const newStatus = currentStatus === 'true' ? false : true;
                statusCell.innerHTML = `
                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                        ${newStatus ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                        ${newStatus ? 'Active' : 'Inactive'}
                    </span>
                `;
                
                // Update toggle button
                toggleButton.textContent = newStatus ? 'Deactivate' : 'Activate';
                toggleButton.className = `${newStatus ? 'bg-primary-accent hover:bg-red-600' : 'bg-green-700 hover:bg-green-800'} text-white px-3 py-2 rounded-md`;
                toggleButton.setAttribute('onclick', `toggleCouponStatus('${couponId}', '${newStatus}')`);
                
                showToast(`Coupon ${action}d successfully`);
            }
        } catch (error) {
            showToast(error.response?.data?.message || `Failed to ${action} coupon`, 'error');
        }
    }
  }

  async function deleteCoupon(couponId) {
    const confirmed = await customConfirm(
        'Are you sure you want to delete this coupon?',
        'Delete Coupon'
    );

    if (confirmed) {
        try {
            const response = await axios.delete(`/admin/coupons/${couponId}`);
            if (response.data.success) {
                const row = document.querySelector(`button[onclick="deleteCoupon('${couponId}')"]`).closest('tr');
                row.remove();
                
                const tbody = document.getElementById('couponsTable');
                if (tbody.children.length === 0) {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="8" class="px-6 py-4 text-center text-gray-500">
                                No coupons available
                            </td>
                        </tr>
                    `;
                } else {
                    updateRowNumbers();
                }
                showToast('Coupon deleted successfully');
            }
        } catch (error) {
            showToast(error.response?.data?.message || 'Failed to delete coupon', 'error');
        }
    }
  }

  // Helper function to create a new coupon row
  function createCouponRow(data, couponId) {
    const now = new Date();
    const isExpired = new Date(data.expiryDate) < now;
    
    return `
        <tr>
            <td class="px-6 py-4 whitespace-nowrap">1</td>
            <td class="px-6 py-4 whitespace-nowrap">${data.code}</td>
            <td class="px-6 py-4 whitespace-nowrap">${data.discountType}</td>
            <td class="px-6 py-4 whitespace-nowrap">
                ${data.discountType === 'PERCENTAGE' ? data.discountValue + '%' : '₹' + data.discountValue}
            </td>
            <td class="px-6 py-4 whitespace-nowrap">₹${data.minPurchase}</td>
            <td class="px-6 py-4 whitespace-nowrap">${new Date(data.expiryDate).toLocaleDateString()}</td>
            <td class="px-6 py-4 whitespace-nowrap">
                ${isExpired ? 
                    `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                        Expired
                    </span>` :
                    `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        Active
                    </span>`
                }
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <div class="flex space-x-2">
                    <button onclick="editCoupon('${couponId}')"
                        class="bg-blue-500 text-white px-3 py-2 rounded-md hover:bg-blue-600">
                        Edit
                    </button>
                    ${!isExpired ? 
                        `<button onclick="toggleCouponStatus('${couponId}', 'true')"
                            class="bg-primary-accent text-white px-3 py-2 rounded-md hover:bg-red-600">
                            Deactivate
                        </button>` : ''
                    }
                    <button onclick="deleteCoupon('${couponId}')"
                        class="bg-primary-accent text-white px-3 py-2 rounded-md hover:bg-red-600">
                        Delete
                    </button>
                </div>
            </td>
        </tr>
    `;
  }

  // Helper function to update an existing coupon row
  function updateCouponRow(row, data, couponId) {
    row.children[1].textContent = data.code;
    row.children[2].textContent = data.discountType;
    row.children[3].textContent = data.discountType === 'PERCENTAGE' ? 
        data.discountValue + '%' : '₹' + data.discountValue;
    row.children[4].textContent = '₹' + data.minPurchase;
    row.children[5].textContent = new Date(data.expiryDate).toLocaleDateString();
  }

  // Helper function to update row numbers
  function updateRowNumbers() {
    const rows = document.querySelectorAll('#couponsTable tr');
    const currentPage = parseInt(new URLSearchParams(window.location.search).get('page')) || 1;
    rows.forEach((row, index) => {
        const numberCell = row.querySelector('td:first-child');
        if (numberCell) {
            numberCell.textContent = ((currentPage - 1) * 10) + index + 1;
        }
    });
  }

  // Update validation based on discount type
  function updateDiscountValidation() {
    const discountType = document.getElementById('discountType').value;
    const discountValue = document.getElementById('discountValue');
    const discountValueHint = document.getElementById('discountValueHint');
    const maxDiscountField = document.getElementById('maxDiscount').closest('.mb-4');
    const maxDiscount = document.getElementById('maxDiscount');

    if (discountType === 'PERCENTAGE') {
      discountValue.max = 99;
      discountValue.min = 1;
      discountValueHint.textContent = '(1-99 for percentage)';
      maxDiscountField.classList.remove('hidden');
      maxDiscount.value = maxDiscount.value || '100';
    } else {
      discountValue.removeAttribute('max');
      discountValue.min = 1;
      discountValueHint.textContent = '(Fixed amount in ₹)';
      maxDiscountField.classList.add('hidden');
      maxDiscount.value = '0';
    }
  }

  // Character counter for description
  document.getElementById('description').addEventListener('input', function() {
    const count = this.value.length;
    document.getElementById('descriptionCount').textContent = `${count}/100`;
  });
</script>

<%- include('../partials/adminfooter') %>
