<%- include('../partials/adminheader') %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<div class="flex min-h-screen">
  <!-- Sidebar -->
  <aside id="sidebar" class="bg-gray-100 w-full md:w-64 h-screen">
    <nav class="py-4">
      <div class="px-4 md:px-6">
        <h2 class="text-sm font-semibold text-gray-600 uppercase">Menu</h2>
        <ul class="mt-4 space-y-2">
          <li>
            <a href="/admin/dashboard" class="flex items-center px-4 py-2 text-gray-800 hover:bg-gray-200 rounded-lg">
              <i class="fas fa-th-large mr-3"></i>
              <span>Dashboard</span>
            </a>
          </li>
          <li>
            <a href="/admin/products" class="flex items-center px-4 py-2 bg-primary-accent text-gray-200 hover:bg-primary-hover rounded-lg">
              <i class="fas fa-box mr-3"></i>
              <span>Products</span>
            </a>
          </li>
          <li>
            <a href="/admin/categories" class="flex items-center px-4 py-2 text-gray-800 hover:bg-gray-200 rounded-lg">
              <i class="fas fa-layer-group mr-3"></i>
              <span>Category</span>
            </a>
          </li>
          <li>
            <a href="/admin/orders" class="flex items-center px-4 py-2 text-gray-800 hover:bg-gray-200 rounded-lg">
              <i class="fas fa-shopping-cart mr-3"></i>
              <span>Orders</span>
            </a>
          </li>
          <li>
            <a href="/admin/coupons" class="flex items-center px-4 py-2 text-gray-800 hover:bg-gray-200 rounded-lg">
              <i class="fas fa-ticket-alt mr-3"></i>
              <span>Coupon</span>
            </a>
          </li>
          <li>
            <a href="/admin/banners" class="flex items-center px-4 py-2 text-gray-800 hover:bg-gray-200 rounded-lg">
              <i class="fas fa-images mr-3"></i>
              <span>Banner</span>
            </a>
          </li>
          <li>
            <a href="/transactions" class="flex items-center px-4 py-2 text-gray-800 hover:bg-gray-200 rounded-lg">
              <i class="fas fa-receipt mr-3"></i>
              <span>Transaction</span>
            </a>
          </li>
        </ul>
      </div>
      <div class="px-4 md:px-6 mt-8">
        <h2 class="text-sm font-semibold text-gray-600 uppercase">User Management</h2>
        <ul class="mt-4 space-y-2">
          <li>
            <a href="/admin/admins" class="flex items-center px-4 py-2 text-gray-800 hover:bg-gray-200 rounded-lg">
              <i class="fas fa-user-shield mr-3"></i>
              <span>Manage Admins</span>
            </a>
          </li>
          <li>
            <a href="/admin/customers" class="flex items-center px-4 py-2 text-gray-800 hover:bg-gray-200 rounded-lg">
              <i class="fas fa-users mr-3"></i>
              <span>Customers</span>
            </a>
          </li>
        </ul>
      </div>
      <div class="px-4 md:px-6 mt-8">
        <h2 class="text-sm font-semibold text-gray-600 uppercase">Others</h2>
        <ul class="mt-4 space-y-2">
          <li>
            <a href="/admin/settings" class="flex items-center px-4 py-2 text-gray-800 hover:bg-gray-200 rounded-lg">
              <i class="fas fa-cogs mr-3"></i>
              <span>Settings</span>
            </a>
          </li>
          <li>
            <a href="/admin/help" class="flex items-center px-4 py-2 text-gray-800 hover:bg-gray-200 rounded-lg">
              <i class="fas fa-question-circle mr-3"></i>
              <span>Help</span>
            </a>
          </li>
          <li>
            <a href="/admin/logout" class="flex items-center px-4 py-2 text-gray-800 hover:bg-gray-200 rounded-lg">
              <i class="fas fa-sign-out-alt mr-3"></i>
              <span>Logout</span>
            </a>
          </li>
        </ul>
      </div>
    </nav>
  </aside>

  <!-- Main Content -->
  <main class="flex-grow p-4 md:py-6 bg-gray-50">
    <h1 class="text-2xl font-bold text-gray-800">Add New Product</h1>
   <!-- Add Product Form -->
<div id="productFormContainer" class="bg-white shadow-lg rounded-lg p-8 mt-4">
  <form id="addProductForm" action="/admin/products/add" method="POST" enctype="multipart/form-data">
    <!-- Product Name -->
    <div class="form-group mb-4">
      <label class="block text-sm font-medium text-gray-700 mb-2">Product Name</label>
      <input type="text" name="name" class="w-full h-12 px-4 py-2 text-base rounded-lg border border-gray-300 focus:border-blue-500" required placeholder="Enter product name">
    </div>
    <!-- Brand -->
    <div class="form-group mb-4">
      <label class="block text-sm font-medium text-gray-700 mb-2">Brand</label>
      <input type="text" name="brand" class="w-full h-12 px-4 py-2 text-base rounded-lg border border-gray-300 focus:border-blue-500" required placeholder="Enter brand name">
    </div>
    <!-- Category -->
    <div class="form-group mb-4">
      <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
      <select name="category" class="w-full h-12 px-4 py-2 rounded-lg border border-gray-300 focus:border-blue-500" required>
        <option value="">Select Category</option>
        <% categories.forEach(category => { %>
          <option value="<%= category._id %>"><%= category.name %></option>
        <% }); %>
      </select>
    </div>
    <!-- Main Image -->
    <div class="form-group mb-4">
      <label class="block text-sm font-medium text-gray-700 mb-2">Images</label>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <input type="file" name="mainImages" accept="image/*" class="w-full px-4 py-2 border border-gray-300 rounded-lg" required onchange="handleImageUpload(this, 'preview1', 'uploadLabel1', 'cropperModal', 'cropperImage')">
        <input type="file" name="mainImages" accept="image/*" class="w-full px-4 py-2 border border-gray-300 rounded-lg" required onchange="handleImageUpload(this, 'preview2', 'uploadLabel2', 'cropperModal', 'cropperImage')">
        <input type="file" name="mainImages" accept="image/*" class="w-full px-4 py-2 border border-gray-300 rounded-lg" required onchange="handleImageUpload(this, 'preview3', 'uploadLabel3', 'cropperModal', 'cropperImage')">
        <input type="file" name="mainImages" accept="image/*" class="w-full px-4 py-2 border border-gray-300 rounded-lg" required onchange="handleImageUpload(this, 'preview4', 'uploadLabel4', 'cropperModal', 'cropperImage')">
      </div>
      <small class="text-gray-500">Please upload 4 images.</small>
    </div>
  </form>

  <!-- Add Variant Button -->
  <div class="flex justify-end mt-6">
    <button type="button" id="openVariantModal" class="px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600">Add Variant</button>
  </div>

  <!-- Variants Section -->
  <div id="variantsContainer" class="mt-8"></div>

  <!-- Add Product Button -->
  <div id="addProductButtonContainer" class="flex justify-end mt-6 hidden">
    <button type="submit" form="addProductForm" class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Add Product</button>
  </div>
</div>

<!-- Variant Modal -->
<div id="variantModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
  <div class="bg-white rounded-lg p-6 w-full max-w-lg">
    <h3 class="text-lg font-semibold mb-4">Add Variant</h3>
    <form id="addVariantForm">
      <div class="form-group mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">Variant Name</label>
        <input type="text" name="variantName" class="w-full px-4 py-2 border rounded-lg" required>
      </div>
      <div class="form-group mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">Price</label>
        <input type="text" name="price" class="w-full px-4 py-2 border rounded-lg" required>
      </div>
      <div class="form-group mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">Stock</label>
        <input type="number" name="stock" class="w-full px-4 py-2 border rounded-lg" required>
      </div>
      <div class="form-group mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">Discount</label>
        <input type="text" name="discount" class="w-full px-4 py-2 border rounded-lg" placeholder="Enter discount (optional)">
      </div>
      <div class="flex justify-end gap-4">
        <button type="button" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400" onclick="closeVariantModal()">Cancel</button>
        <button type="submit" class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">Add</button>
      </div>
    </form>
  </div>
</div>

  </main>
</div>

<!-- Cropper Modal -->
<div id="cropperModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
  <div class="bg-white rounded-lg p-6 max-w-2xl w-full mx-4">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold">Crop Image</h3>
      <button onclick="closeCropper()" class="text-gray-500 hover:text-gray-700">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="relative aspect-square mb-4">
      <img id="cropperImage" src="#" class="max-w-full">
    </div>
    <div class="flex justify-end gap-3">
      <button onclick="closeCropper()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300">Cancel</button>
      <button onclick="applyCrop()" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">Apply</button>
    </div>
  </div>
</div>

<script>
let cropper;
let currentImageInput;
let currentPreviewId;
let currentUploadLabelId;

function handleImageUpload(input, previewId, uploadLabelId, modalId, cropperImageId) {
  if (input.files && input.files[0]) {
    const reader = new FileReader();
    currentImageInput = input;
    currentPreviewId = previewId;
    currentUploadLabelId = uploadLabelId;
    
    reader.onload = function(e) {
      // Set the image in the cropper modal
      const cropperImg = document.getElementById(cropperImageId);
      cropperImg.src = e.target.result;
      
      // Show the modal
      const modal = document.getElementById(modalId);
      modal.style.display = 'flex';
      
      // Initialize cropper
      if (cropper) {
        cropper.destroy();
      }
      
      cropper = new Cropper(cropperImg, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1,
        background: false,
        zoomable: true,
        scalable: true
      });
    };
    
    reader.readAsDataURL(input.files[0]);
  }
}

function closeCropper() {
  const modal = document.getElementById('cropperModal');
  modal.style.display = 'none';
  
  if (cropper) {
    cropper.destroy();
    cropper = null;
  }
  
  // Clear the current input if no preview was saved
  const uploadLabel = document.getElementById(currentUploadLabelId);
  if (uploadLabel && !uploadLabel.querySelector('.preview-image')) {
    currentImageInput.value = '';
  }
}

function applyCrop() {
  if (cropper && currentImageInput) {
    cropper.getCroppedCanvas({
      width: 600,
      height: 600,
      fillColor: '#fff'
    }).toBlob((blob) => {
      // Create or update preview for the current upload label
      const uploadLabel = document.getElementById(currentUploadLabelId);
      let previewContainer = uploadLabel.querySelector('.preview-container');
      
      if (!previewContainer) {
        // Create preview container if it doesn't exist
        previewContainer = document.createElement('div');
        previewContainer.className = 'preview-container relative aspect-square w-full';
        
        // Create preview image
        const previewImg = document.createElement('img');
        previewImg.className = 'preview-image w-full h-full object-cover rounded-lg';
        previewContainer.appendChild(previewImg);
        
        // Create remove button
        const removeBtn = document.createElement('button');
        removeBtn.className = 'absolute top-1 right-1 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600';
        removeBtn.innerHTML = '<i class="fas fa-times"></i>';
        removeBtn.onclick = function(e) {
          e.stopPropagation();
          removeImage(currentUploadLabelId);
        };
        previewContainer.appendChild(removeBtn);
        
        // Hide original upload content
        const uploadContent = uploadLabel.querySelector('div');
        if (uploadContent) {
          uploadContent.style.display = 'none';
        }
        
        uploadLabel.appendChild(previewContainer);
      }
      
      // Update preview image
      const previewImg = previewContainer.querySelector('.preview-image');
      const url = URL.createObjectURL(blob);
      previewImg.src = url;
      
      // Update the file input
      const dataTransfer = new DataTransfer();
      const file = new File([blob], currentImageInput.files[0].name, {
        type: 'image/jpeg',
        lastModified: new Date().getTime()
      });
      dataTransfer.items.add(file);
      currentImageInput.files = dataTransfer.files;
      
      // Close the cropper modal
      closeCropper();
    }, 'image/jpeg', 0.9);
  }
}

function removeImage(uploadLabelId) {
  const uploadLabel = document.getElementById(uploadLabelId);
  const previewContainer = uploadLabel.querySelector('.preview-container');
  const uploadContent = uploadLabel.querySelector('div');
  const fileInput = uploadLabel.querySelector('input[type="file"]');
  
  if (previewContainer) {
    previewContainer.remove();
  }
  
  if (uploadContent) {
    uploadContent.style.display = 'flex';
  }
  
  if (fileInput) {
    fileInput.value = '';
  }
}

// Function to clone variant with proper event handling
function addVariant() {
  const variantsContainer = document.getElementById('variantsContainer');
  const variantTemplate = document.querySelector('.variant-item').cloneNode(true);
  
  // Show the remove button for additional variants
  const removeBtn = variantTemplate.querySelector('.remove-variant-btn');
  if (removeBtn) {
    removeBtn.style.display = 'block';
  }
  
  // Clear input values and file inputs
  variantTemplate.querySelectorAll('input').forEach(input => {
    if (input.type === 'file') {
      // Reset file input and its associated preview
      const uploadLabel = input.closest('label');
      const uploadContent = uploadLabel.querySelector('div');
      if (uploadContent) {
        uploadContent.style.display = 'flex';
      }
      const previewContainer = uploadLabel.querySelector('.preview-container');
      if (previewContainer) {
        previewContainer.remove();
      }
    }
    input.value = '';
  });
  
  variantsContainer.appendChild(variantTemplate);
}

// Add event listener for the modal backdrop click
document.getElementById('cropperModal').addEventListener('click', function(e) {
  if (e.target === this) {
    closeCropper();
  }
});

// Prevent propagation of clicks inside the modal content
document.querySelector('#cropperModal > div').addEventListener('click', function(e) {
  e.stopPropagation();
});



let variants = [];

// Global variable to track the index of the variant being edited
let editingVariantIndex = null;

// Open Variant Modal
document.getElementById('openVariantModal').addEventListener('click', () => {
  document.getElementById('variantModal').style.display = 'flex';
});

// Close Variant Modal
function closeVariantModal() {
  document.getElementById('variantModal').style.display = 'none';
  document.getElementById('addVariantForm').reset();
}

// Handle Add Variant
document.getElementById('addVariantForm').addEventListener('submit', (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  const variant = Object.fromEntries(formData.entries());

  if (editingVariantIndex !== null) {
    // Update the existing variant
    variants[editingVariantIndex] = variant;
    editingVariantIndex = null; // Reset the editing index
  } else {
    // Add a new variant
    variants.push(variant);
  }

  updateVariantsContainer();
  closeVariantModal();
});

// Update Variants Display
function updateVariantsContainer() {
  const container = document.getElementById('variantsContainer');
  container.innerHTML = variants.map((variant, index) => `
    <div class="p-4 border rounded-lg bg-gray-50 mb-4">
      <div class="flex justify-between items-center">
        <div>
          <h4 class="text-lg font-semibold">${variant.variantName}</h4>
          <p>Price: $${variant.price}</p>
          <p>Stock: ${variant.stock}</p>
          <p>Discount: ${variant.discount ? variant.discount : 'N/A'}</p>
        </div>
        <div class="flex gap-2">
          <button class="px-3 py-1 bg-blue-500 text-white rounded" onclick="editVariant(${index})">Edit</button>
          <button class="px-3 py-1 bg-red-500 text-white rounded" onclick="removeVariant(${index})">Remove</button>
        </div>
      </div>
    </div>
  `).join('');

  const addButtonContainer = document.getElementById('addProductButtonContainer');
  addButtonContainer.style.display = variants.length > 0 ? 'block' : 'none';
}

// Edit Variant
function editVariant(index) {
  const variant = variants[index];
  const form = document.getElementById('addVariantForm');
  form.variantName.value = variant.variantName;
  form.price.value = variant.price;
  form.stock.value = variant.stock;
  form.discount.value = variant.discount || ''; // Set discount if it exists

  editingVariantIndex = index; // Set the index of the variant being edited
  document.getElementById('variantModal').style.display = 'flex';
}

// Remove Variant
function removeVariant(index) {
  variants.splice(index, 1);
  updateVariantsContainer();
}

</script>