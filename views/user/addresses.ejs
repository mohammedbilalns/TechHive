<%- include('../partials/header') %>

  <!-- Mobile Menu Button -->
  <div class="md:hidden p-4 bg-gray-100 flex justify-between items-center">
    <h1 class="text-xl font-semibold text-gray-800">My Addresses</h1>
    <button onclick="toggleSidebar()" class="text-gray-600 hover:text-gray-900">
      <i class="fas fa-bars text-xl"></i>
    </button>
  </div>

  <div class="flex flex-col md:flex-row">
    
   <%- include('../partials/usersidebar') %>

    <!-- Main Content -->
    <main class="flex-grow p-4 md:py-12">
      <% if (locals.message && locals.alertType) { %>
        <div id="alertMessage" class="mb-4 p-3 rounded-md 
           <%= alertType === 'error' ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700' %>">
          <%= message %>
        </div>
        <% } %>

          <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex justify-between items-center mb-6">
              <h1 class="text-2xl font-semibold text-gray-800">My Addresses</h1>
              <% if (addresses.length < 5) { %>
                <button onclick="toggleAddAddress()"
                  class="bg-primary-accent text-white px-4 py-2 rounded-lg hover:bg-primary-accent/90">
                  <i class="fas fa-plus mr-2"></i> Add New Address
                </button>
              <% } else { %>
                <button 
                  class="bg-gray-400 text-white px-4 py-2 rounded-lg cursor-not-allowed"
                  disabled
                  title="Maximum limit of 5 addresses reached">
                  <i class="fas fa-plus mr-2"></i> Add New Address
                </button>
              <% } %>
            </div>

            <!-- Edit Address Modal -->
            <div id="editAddressModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50">
              <div class="bg-white rounded-lg shadow-xl p-6 m-4 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                <div class="flex justify-between items-center mb-4">
                  <h2 class="text-xl font-semibold text-gray-800">Edit Address</h2>
                  <button onclick="toggleEditAddress()" class="text-gray-600 hover:text-gray-900">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
                
                <form id="editAddressForm">
                  <input type="hidden" name="addressId">
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label class="block text-gray-600 mb-2">Name</label>
                      <input type="text" name="name" minlength="3" maxlength="50" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                    </div>
                    <div>
                      <label class="block text-gray-600 mb-2">House Name</label>
                      <input type="text" name="houseName" minlength="3" maxlength="50" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                    </div>
                    <div>
                      <label class="block text-gray-600 mb-2">Locality/Street</label>
                      <input type="text" name="localityStreet" minlength="3" maxlength="50" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                    </div>
                    <div>
                      <label class="block text-gray-600 mb-2">City</label>
                      <input type="text" name="city" minlength="3" maxlength="50" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                    </div>
                    <div>
                      <label class="block text-gray-600 mb-2">State</label>
                      <select name="state" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                        <option value="">Select State</option>
                        <option value="Andhra Pradesh">Andhra Pradesh</option>
                        <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                        <option value="Assam">Assam</option>
                        <option value="Bihar">Bihar</option>
                        <option value="Chhattisgarh">Chhattisgarh</option>
                        <option value="Goa">Goa</option>
                        <option value="Gujarat">Gujarat</option>
                        <option value="Haryana">Haryana</option>
                        <option value="Himachal Pradesh">Himachal Pradesh</option>
                        <option value="Jharkhand">Jharkhand</option>
                        <option value="Karnataka">Karnataka</option>
                        <option value="Kerala">Kerala</option>
                        <option value="Madhya Pradesh">Madhya Pradesh</option>
                        <option value="Maharashtra">Maharashtra</option>
                        <option value="Manipur">Manipur</option>
                        <option value="Meghalaya">Meghalaya</option>
                        <option value="Mizoram">Mizoram</option>
                        <option value="Nagaland">Nagaland</option>
                        <option value="Odisha">Odisha</option>
                        <option value="Punjab">Punjab</option>
                        <option value="Rajasthan">Rajasthan</option>
                        <option value="Sikkim">Sikkim</option>
                        <option value="Tamil Nadu">Tamil Nadu</option>
                        <option value="Telangana">Telangana</option>
                        <option value="Tripura">Tripura</option>
                        <option value="Uttar Pradesh">Uttar Pradesh</option>
                        <option value="Uttarakhand">Uttarakhand</option>
                        <option value="West Bengal">West Bengal</option>
                        <option value="Andaman and Nicobar Islands">Andaman and Nicobar Islands</option>
                        <option value="Chandigarh">Chandigarh</option>
                        <option value="Dadra and Nagar Haveli and Daman and Diu">Dadra and Nagar Haveli and Daman and Diu</option>
                        <option value="Lakshadweep">Lakshadweep</option>
                        <option value="Delhi">Delhi</option>
                        <option value="Puducherry">Puducherry</option>
                        <option value="Ladakh">Ladakh</option>
                        <option value="Jammu and Kashmir">Jammu and Kashmir</option>
                      </select>
                    </div>
                    <div>
                      <label class="block text-gray-600 mb-2">Pincode</label>
                      <input type="text" name="pincode" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                    </div>
                    <div>
                      <label class="block text-gray-600 mb-2">Phone</label>
                      <input type="tel" name="phone" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                    </div>
                    <div>
                      <label class="block text-gray-600 mb-2">Alternate Phone (Optional)</label>
                      <input type="tel" name="alternatePhone" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                    </div>
                  </div>
                  <div class="flex justify-end space-x-4 mt-4">
                    <button type="button" onclick="toggleEditAddress()" class="px-4 py-2 border rounded-lg hover:bg-gray-50">Cancel</button>
                    <button type="button" onclick="submitEditAddress()" class="bg-primary-accent text-white px-4 py-2 rounded-lg hover:bg-primary-accent/90">
                      Update Address
                    </button>
                  </div>
                </form>
              </div>
            </div>

            <!-- Address List -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <% addresses.forEach(address=> { %>
                <div class="border rounded-lg p-4" data-address-id="<%= address._id %>">
                  <div class="flex justify-end items-start mb-2">
                    <div class="flex space-x-2">
                      <button onclick="editAddress('<%= address._id %>')" class="text-blue-600 hover:text-blue-800">
                        <i class="fas fa-edit"></i>
                      </button>
                      <button onclick="deleteAddress('<%= address._id %>')" class="text-red-600 hover:text-red-800">
                        <i class="fas fa-trash"></i>
                      </button>
                    </div>
                  </div>
                  <p class="font-semibold">
                    <%= address.name %>
                  </p>
                  <p class="font-semibold">
                    <%= address.houseName %>
                  </p>
                  <p class="text-gray-600">
                    <%= address.localityStreet %>
                  </p>
                  <p class="text-gray-600">
                    <%= address.city %>, <%= address.state %>
                  </p>
                  <p class="text-gray-600">PIN: <%= address.pincode %>
                  </p>
                  <p class="text-gray-600">Phone: <%= address.phone %>
                  </p>
                </div>
                <% }) %>
            </div>
          </div>
    </main>
  </div>

  <!-- Add Address Modal -->
  <div id="addAddressModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg shadow-xl p-6 m-4 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold text-gray-800">Add New Address</h2>
        <button onclick="toggleAddAddress()" class="text-gray-600 hover:text-gray-900">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <form id="addAddressForm">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-gray-600 mb-2">Name</label>
            <input type="text" name="name" minlength="3" maxlength="50" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
          </div>
          <div>
            <label class="block text-gray-600 mb-2">House Name</label>
            <input type="text" name="houseName" minlength="3" maxlength="50" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
          </div>
          <div>
            <label class="block text-gray-600 mb-2">Locality/Street</label>
            <input type="text" name="localityStreet" minlength="3" maxlength="50" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
          </div>
          <div>
            <label class="block text-gray-600 mb-2">City</label>
            <input type="text" name="city" minlength="3" maxlength="50" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
          </div>
          <div>
            <label class="block text-gray-600 mb-2">State</label>
            <select name="state" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
              <option value="">Select State</option>
              <option value="Andhra Pradesh">Andhra Pradesh</option>
              <option value="Arunachal Pradesh">Arunachal Pradesh</option>
              <option value="Assam">Assam</option>
              <option value="Bihar">Bihar</option>
              <option value="Chhattisgarh">Chhattisgarh</option>
              <option value="Goa">Goa</option>
              <option value="Gujarat">Gujarat</option>
              <option value="Haryana">Haryana</option>
              <option value="Himachal Pradesh">Himachal Pradesh</option>
              <option value="Jharkhand">Jharkhand</option>
              <option value="Karnataka">Karnataka</option>
              <option value="Kerala">Kerala</option>
              <option value="Madhya Pradesh">Madhya Pradesh</option>
              <option value="Maharashtra">Maharashtra</option>
              <option value="Manipur">Manipur</option>
              <option value="Meghalaya">Meghalaya</option>
              <option value="Mizoram">Mizoram</option>
              <option value="Nagaland">Nagaland</option>
              <option value="Odisha">Odisha</option>
              <option value="Punjab">Punjab</option>
              <option value="Rajasthan">Rajasthan</option>
              <option value="Sikkim">Sikkim</option>
              <option value="Tamil Nadu">Tamil Nadu</option>
              <option value="Telangana">Telangana</option>
              <option value="Tripura">Tripura</option>
              <option value="Uttar Pradesh">Uttar Pradesh</option>
              <option value="Uttarakhand">Uttarakhand</option>
              <option value="West Bengal">West Bengal</option>
              <option value="Andaman and Nicobar Islands">Andaman and Nicobar Islands</option>
              <option value="Chandigarh">Chandigarh</option>
              <option value="Dadra and Nagar Haveli and Daman and Diu">Dadra and Nagar Haveli and Daman and Diu</option>
              <option value="Lakshadweep">Lakshadweep</option>
              <option value="Delhi">Delhi</option>
              <option value="Puducherry">Puducherry</option>
              <option value="Ladakh">Ladakh</option>
              <option value="Jammu and Kashmir">Jammu and Kashmir</option>
            </select>
          </div>
          <div>
            <label class="block text-gray-600 mb-2">Pincode</label>
            <input type="text" name="pincode" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
          </div>
          <div>
            <label class="block text-gray-600 mb-2">Phone</label>
            <input type="tel" name="phone" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
          </div>
          <div>
            <label class="block text-gray-600 mb-2">Alternate Phone (Optional)</label>
            <input type="tel" name="alternatePhone" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
          </div>
        </div>
        <div class="flex justify-end space-x-4 mt-4">
          <button type="button" onclick="toggleAddAddress()" class="px-4 py-2 border rounded-lg hover:bg-gray-50">Cancel</button>
          <button type="button" onclick="submitAddAddress()" class="bg-primary-accent text-white px-4 py-2 rounded-lg hover:bg-primary-accent/90">
            Save Address
          </button>
        </div>
      </form>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script type="module">
    import { customConfirm, showAlert, closeCustomAlert } from '/js/util.js';
    window.customConfirm = customConfirm;
    window.showAlert = showAlert;
    window.closeCustomAlert = closeCustomAlert;
  </script>
 <script>
    function toggleSidebar() {
      const sidebar = document.getElementById('sidebar');
      sidebar.classList.toggle('hidden');
      sidebar.classList.toggle('fixed');
      sidebar.classList.toggle('top-0');
      sidebar.classList.toggle('left-0');
      sidebar.classList.toggle('z-50');
      sidebar.classList.toggle('h-full');
    }

    function toggleAddAddress() {
      const modal = document.getElementById('addAddressModal');
      modal.classList.toggle('hidden');
      modal.classList.toggle('flex');
      
      // Reset form when closing
      if (modal.classList.contains('hidden')) {
        document.getElementById('addAddressForm').reset();
      }
    }

    function toggleEditAddress() {
      const modal = document.getElementById('editAddressModal');
      modal.classList.toggle('hidden');
      modal.classList.toggle('flex');
      
      // Reset form when closing
      if (modal.classList.contains('hidden')) {
        document.getElementById('editAddressForm').reset();
      }
    }

    async function editAddress(addressId) {
      try {
        const response = await axios.get(`/account/address/${addressId}`);
        const address = response.data.address;

        // Populate the edit form
        const form = document.getElementById('editAddressForm');
        form.querySelector('[name="addressId"]').value = addressId;
        form.querySelector('[name="name"]').value = address.name;
        form.querySelector('[name="houseName"]').value = address.houseName;
        form.querySelector('[name="localityStreet"]').value = address.localityStreet;
        form.querySelector('[name="city"]').value = address.city;
        form.querySelector('[name="state"]').value = address.state;
        form.querySelector('[name="pincode"]').value = address.pincode;
        form.querySelector('[name="phone"]').value = address.phone;
        form.querySelector('[name="alternatePhone"]').value = address.alternatePhone || '';

        // Show the edit modal
        toggleEditAddress();
      } catch (error) {
        console.error('Error fetching address:', error);
        alert('Failed to load address details');
      }
    }

    async function submitEditAddress() {
      try {
        const form = document.getElementById('editAddressForm');
        const addressId = form.querySelector('[name="addressId"]').value;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        
        if (!validateAddressForm(data)) return;

        const response = await axios.put(`/account/address/${addressId}`, data);
        
        if (response.data.success) {
          toggleEditAddress(); // Close the modal
          showAlert('Address updated successfully', 'success');
          
          // Update the address card in the UI
          const addressCard = document.querySelector(`[data-address-id="${addressId}"]`);
          addressCard.innerHTML = generateAddressCard(response.data.address);
        } else {
          showAlert(response.data.message || 'Failed to update address', 'error');
        }
      } catch (error) {
        console.error('Error updating address:', error);
        showAlert('Failed to update address', 'error');
      }
    }

    async function deleteAddress(addressId) {
      const confirmed = await customConfirm('Are you sure you want to delete this address?');
      if (!confirmed) return;

      try {
        const response = await axios.delete(`/account/address/${addressId}`);
        
        if (response.data.success) {
          showAlert('Address deleted successfully', 'success');
          
          // Remove the address card from the UI
          const addressCard = document.querySelector(`[data-address-id="${addressId}"]`);
          addressCard.remove();
          
          // Update the Add Address button
          updateAddAddressButton();
        } else {
          showAlert(response.data.message || 'Failed to delete address', 'error');
        }
      } catch (error) {
        console.error('Error deleting address:', error);
        showAlert('Failed to delete address', 'error');
      }
    }

    function validateAddressForm(data) {
      // Trim all input values
      Object.keys(data).forEach(key => {
        if (typeof data[key] === 'string') {
          data[key] = data[key].trim();
        }
      });

      // Check for empty fields after trimming
      if (!data.name || !data.houseName || !data.localityStreet || 
          !data.city || !data.state || !data.pincode || !data.phone) {
        showAlert('Please fill in all required fields', 'error');
        return false;
      }

      // Validate text fields (name, houseName, localityStreet, city)
      const textPattern = /^[a-zA-Z0-9\s,.-]+$/;
      const validationRules = [
        { field: 'name', label: 'Name' },
        { field: 'houseName', label: 'House Name' },
        { field: 'localityStreet', label: 'Locality/Street' },
        { field: 'city', label: 'City' }
      ];

      for (const rule of validationRules) {
        // Check length constraints
        if (data[rule.field].length < 3 || data[rule.field].length > 50) {
          showAlert(`${rule.label} must be between 3 and 50 characters`, 'error');
          return false;
        }

        if (!textPattern.test(data[rule.field])) {
          showAlert(`${rule.label} can only contain letters, numbers, spaces, commas, periods, and hyphens`, 'error');
          return false;
        }

        // Check for multiple consecutive spaces
        if (/\s\s+/.test(data[rule.field])) {
          showAlert(`${rule.label} cannot contain multiple consecutive spaces`, 'error');
          return false;
        }
      }

      // Pincode validation (6 digits)
      if (!/^\d{6}$/.test(data.pincode)) {
        showAlert('Please enter a valid 6-digit pincode', 'error');
        return false;
      }

      // Phone number validation (10 digits)
      if (!/^\d{10}$/.test(data.phone)) {
        showAlert('Please enter a valid 10-digit phone number', 'error');
        return false;
      }

      // Alternate phone validation (if provided)
      if (data.alternatePhone && !/^\d{10}$/.test(data.alternatePhone)) {
        showAlert('Please enter a valid 10-digit alternate phone number', 'error');
        return false;
      }

      return true;
    }

    async function submitAddAddress() {
      try {
        const form = document.getElementById('addAddressForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        if (!validateAddressForm(data)) return;

        const response = await axios.post('/account/add-address', data);

        if (response.data.success) {
          toggleAddAddress(); // Close the modal
          showAlert('Address added successfully', 'success');
          
          // Add the new address card to the UI
          const addressContainer = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-2.gap-4');
          const newAddressCard = document.createElement('div');
          newAddressCard.innerHTML = generateAddressCard(response.data.address);
          addressContainer.appendChild(newAddressCard.firstElementChild);
          
          // Update the Add Address button if limit reached
          if (checkAddressLimit()) {
            updateAddAddressButton();
          }
        } else {
          showAlert(response.data.message || 'Failed to add address', 'error');
        }
      } catch (error) {
        const errorMessage = error.response?.data?.message || 'Failed to add address';
        showAlert(errorMessage, 'error');
      }
    }

    // Add this event listener to close the modal when clicking outside
    document.getElementById('addAddressModal').addEventListener('click', function(e) {
      if (e.target === this) {
        toggleAddAddress();
      }
    });

    document.getElementById('editAddressModal').addEventListener('click', function(e) {
      if (e.target === this) {
        toggleEditAddress();
      }
    });

    function checkAddressLimit() {
      const addressCount = document.querySelectorAll('.border.rounded-lg.p-4').length;
      return addressCount >= 5;
    }

    // Helper function to generate address card HTML
    function generateAddressCard(address) {
      return `
        <div class="border rounded-lg p-4" data-address-id="${address._id}">
          <div class="flex justify-end items-start mb-2">
            <div class="flex space-x-2">
              <button onclick="editAddress('${address._id}')" class="text-blue-600 hover:text-blue-800">
                <i class="fas fa-edit"></i>
              </button>
              <button onclick="deleteAddress('${address._id}')" class="text-red-600 hover:text-red-800">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
          <p class="font-semibold">${address.name}</p>
          <p class="font-semibold">${address.houseName}</p>
          <p class="text-gray-600">${address.localityStreet}</p>
          <p class="text-gray-600">${address.city}, ${address.state}</p>
          <p class="text-gray-600">PIN: ${address.pincode}</p>
          <p class="text-gray-600">Phone: ${address.phone}</p>
        </div>
      `;
    }

    // Helper function to update Add Address button state
    function updateAddAddressButton() {
      const addButton = document.querySelector('button[onclick="toggleAddAddress()"]');
      const parent = addButton.parentElement;
      
      if (checkAddressLimit()) {
        parent.innerHTML = `
          <button 
            class="bg-gray-400 text-white px-4 py-2 rounded-lg cursor-not-allowed"
            disabled
            title="Maximum limit of 5 addresses reached">
            <i class="fas fa-plus mr-2"></i> Add New Address
          </button>
        `;
      } else {
        parent.innerHTML = `
          <button onclick="toggleAddAddress()"
            class="bg-primary-accent text-white px-4 py-2 rounded-lg hover:bg-primary-accent/90">
            <i class="fas fa-plus mr-2"></i> Add New Address
          </button>
        `;
      }
    }
  </script>

  <%- include('../partials/footer') %>