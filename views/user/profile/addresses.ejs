<%- include('../../partials/header') %>
  <div class="flex flex-col md:flex-row">
    <%- include('../../partials/usersidebar') %>

      <!-- Main Content -->
      <main class="flex-grow p-4 md:py-12">
        <nav class="flex mb-6 text-sm">
          <a href="/home" class="text-gray-500 hover:text-primary-accent">Home</a>
          <span class="mx-2 text-gray-500">/</span>

          <span class="text-gray-800">Addresses</span>
        </nav>
        <% if (locals.message && locals.alertType) { %>
          <div id="alertMessage" class="mb-4 p-3 rounded-md 
           <%= alertType === 'error' ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700' %>">
            <%= message %>
          </div>
          <% } %>

            <div class="bg-white rounded-lg shadow-lg p-6">
              <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
                <h1 class="text-2xl font-semibold text-gray-800 mb-4 sm:mb-0">My Addresses</h1>
                <% if (addresses.length < 5) { %>
                  <button onclick="toggleAddAddress()"
                    class="bg-primary-accent text-white px-4 py-2 rounded-lg hover:bg-primary-accent/90 w-full sm:w-auto">
                    <i class="fas fa-plus mr-2"></i> Add New Address
                  </button>
                  <% } else { %>
                    <button class="bg-gray-400 text-white px-4 py-2 rounded-lg cursor-not-allowed w-full sm:w-auto" disabled
                      title="Maximum limit of 5 addresses reached">
                      <i class="fas fa-plus mr-2"></i> Add New Address
                    </button>
                    <% } %>
              </div>

              <!-- Edit Address Modal -->
              <div id="editAddressModal"
                class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50">
                <div class="bg-white rounded-lg shadow-xl p-6 m-4 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                  <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold text-gray-800">Edit Address</h2>
                    <button onclick="toggleEditAddress()" class="text-gray-600 hover:text-gray-900">
                      <i class="fas fa-times"></i>
                    </button>
                  </div>

                  <form id="editAddressForm">
                    <input type="hidden" name="addressId">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label class="block text-gray-600 mb-2">Name</label>
                        <input type="text" name="name"
                          class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                        <p class="text-red-500 text-sm mt-1 hidden" id="editNameError"></p>
                      </div>
                      <div>
                        <label class="block text-gray-600 mb-2">House Name</label>
                        <input type="text" name="houseName"
                          class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                        <p class="text-red-500 text-sm mt-1 hidden" id="editHouseNameError"></p>
                      </div>
                      <div>
                        <label class="block text-gray-600 mb-2">Locality/Street</label>
                        <input type="text" name="localityStreet"
                          class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                        <p class="text-red-500 text-sm mt-1 hidden" id="editLocalityStreetError"></p>
                      </div>
                      <div>
                        <label class="block text-gray-600 mb-2">City</label>
                        <input type="text" name="city"
                          class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                        <p class="text-red-500 text-sm mt-1 hidden" id="editCityError"></p>
                      </div>
                      <div>
                        <label class="block text-gray-600 mb-2">State</label>
                        <select name="state"
                          class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                          <option value="">Select State</option>
                          <option value="Andhra Pradesh">Andhra Pradesh</option>
                          <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                          <option value="Assam">Assam</option>
                          <option value="Bihar">Bihar</option>
                          <option value="Chhattisgarh">Chhattisgarh</option>
                          <option value="Goa">Goa</option>
                          <option value="Gujarat">Gujarat</option>
                          <option value="Haryana">Haryana</option>
                          <option value="Himachal Pradesh">Himachal Pradesh</option>
                          <option value="Jharkhand">Jharkhand</option>
                          <option value="Karnataka">Karnataka</option>
                          <option value="Kerala">Kerala</option>
                          <option value="Madhya Pradesh">Madhya Pradesh</option>
                          <option value="Maharashtra">Maharashtra</option>
                          <option value="Manipur">Manipur</option>
                          <option value="Meghalaya">Meghalaya</option>
                          <option value="Mizoram">Mizoram</option>
                          <option value="Nagaland">Nagaland</option>
                          <option value="Odisha">Odisha</option>
                          <option value="Punjab">Punjab</option>
                          <option value="Rajasthan">Rajasthan</option>
                          <option value="Sikkim">Sikkim</option>
                          <option value="Tamil Nadu">Tamil Nadu</option>
                          <option value="Telangana">Telangana</option>
                          <option value="Tripura">Tripura</option>
                          <option value="Uttar Pradesh">Uttar Pradesh</option>
                          <option value="Uttarakhand">Uttarakhand</option>
                          <option value="West Bengal">West Bengal</option>
                          <option value="Andaman and Nicobar Islands">Andaman and Nicobar Islands</option>
                          <option value="Chandigarh">Chandigarh</option>
                          <option value="Dadra and Nagar Haveli and Daman and Diu">Dadra and Nagar Haveli and Daman and
                            Diu</option>
                          <option value="Lakshadweep">Lakshadweep</option>
                          <option value="Delhi">Delhi</option>
                          <option value="Puducherry">Puducherry</option>
                          <option value="Ladakh">Ladakh</option>
                          <option value="Jammu and Kashmir">Jammu and Kashmir</option>
                        </select>
                        <p class="text-red-500 text-sm mt-1 hidden" id="editStateError"></p>
                      </div>
                      <div>
                        <label class="block text-gray-600 mb-2">Pincode</label>
                        <input type="text" name="pincode"
                          class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                        <p class="text-red-500 text-sm mt-1 hidden" id="editPincodeError"></p>
                      </div>
                      <div>
                        <label class="block text-gray-600 mb-2">Phone</label>
                        <input type="tel" name="phone"
                          class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                        <p class="text-red-500 text-sm mt-1 hidden" id="editPhoneError"></p>
                      </div>
                      <div>
                        <label class="block text-gray-600 mb-2">Alternate Phone (Optional)</label>
                        <input type="tel" name="alternatePhone"
                          class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
                      </div>
                    </div>
                    <div class="flex justify-end space-x-4 mt-4">
                      <button type="button" onclick="toggleEditAddress()"
                        class="px-4 py-2 border rounded-lg hover:bg-gray-50">Cancel</button>
                      <button type="button" onclick="submitEditAddress()"
                        class="bg-primary-accent text-white px-4 py-2 rounded-lg hover:bg-primary-accent/90">
                        Update Address
                      </button>
                    </div>
                  </form>
                </div>
              </div>

              <!-- Address List -->
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4" id="address-grid">
                <% addresses.forEach(address=> { %>
                  <div class="border rounded-lg p-4" data-address-id="<%= address._id %>">
                    <div class="flex justify-between items-start mb-2">
                      <span class="inline-block bg-gray-100 text-gray-700 px-2 py-1 rounded text-sm">
                        <%= address.label %>
                      </span>
                      <div class="flex space-x-2">
                        <button onclick="editAddress('<%= address._id %>')" class="text-blue-600 hover:text-blue-800">
                          <i class="fas fa-edit"></i>
                        </button>
                        <button onclick="deleteAddress('<%= address._id %>')" class="text-red-600 hover:text-red-800">
                          <i class="fas fa-trash"></i>
                        </button>
                      </div>
                    </div>
                    <p class="font-semibold">
                      <%= address.name %>
                    </p>
                    <p class="font-semibold">
                      <%= address.houseName %>
                    </p>
                    <p class="text-gray-600">
                      <%= address.localityStreet %>
                    </p>
                    <p class="text-gray-600">
                      <%= address.city %>, <%= address.state %>
                    </p>
                    <p class="text-gray-600">PIN: <%= address.pincode %>
                    </p>
                    <p class="text-gray-600">Phone: <%= address.phone %>
                    </p>
                  </div>
                  <% }) %>
              </div>
            </div>
      </main>
  </div>

  <!-- Add Address Modal -->
  <div id="addAddressModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg shadow-xl p-6 m-4 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold text-gray-800">Add New Address</h2>
        <button onclick="toggleAddAddress()" class="text-gray-600 hover:text-gray-900">
          <i class="fas fa-times"></i>
        </button>
      </div>

      <form id="addAddressForm">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-gray-600 mb-2">Name</label>
            <input type="text" name="name" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
            <p class="text-red-500 text-sm mt-1 hidden" id="addNameError"></p>
          </div>
          <div>
            <label class="block text-gray-600 mb-2">House Name</label>
            <input type="text" name="houseName"
              class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
            <p class="text-red-500 text-sm mt-1 hidden" id="addHouseNameError"></p>
          </div>
          <div>
            <label class="block text-gray-600 mb-2">Locality/Street</label>
            <input type="text" name="localityStreet"
              class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
            <p class="text-red-500 text-sm mt-1 hidden" id="addLocalityStreetError"></p>
          </div>
          <div>
            <label class="block text-gray-600 mb-2">City</label>
            <input type="text" name="city" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
            <p class="text-red-500 text-sm mt-1 hidden" id="addCityError"></p>
          </div>
          <div>
            <label class="block text-gray-600 mb-2">State</label>
            <select name="state" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
              <option value="">Select State</option>
              <option value="Andhra Pradesh">Andhra Pradesh</option>
              <option value="Arunachal Pradesh">Arunachal Pradesh</option>
              <option value="Assam">Assam</option>
              <option value="Bihar">Bihar</option>
              <option value="Chhattisgarh">Chhattisgarh</option>
              <option value="Goa">Goa</option>
              <option value="Gujarat">Gujarat</option>
              <option value="Haryana">Haryana</option>
              <option value="Himachal Pradesh">Himachal Pradesh</option>
              <option value="Jharkhand">Jharkhand</option>
              <option value="Karnataka">Karnataka</option>
              <option value="Kerala">Kerala</option>
              <option value="Madhya Pradesh">Madhya Pradesh</option>
              <option value="Maharashtra">Maharashtra</option>
              <option value="Manipur">Manipur</option>
              <option value="Meghalaya">Meghalaya</option>
              <option value="Mizoram">Mizoram</option>
              <option value="Nagaland">Nagaland</option>
              <option value="Odisha">Odisha</option>
              <option value="Punjab">Punjab</option>
              <option value="Rajasthan">Rajasthan</option>
              <option value="Sikkim">Sikkim</option>
              <option value="Tamil Nadu">Tamil Nadu</option>
              <option value="Telangana">Telangana</option>
              <option value="Tripura">Tripura</option>
              <option value="Uttar Pradesh">Uttar Pradesh</option>
              <option value="Uttarakhand">Uttarakhand</option>
              <option value="West Bengal">West Bengal</option>
              <option value="Andaman and Nicobar Islands">Andaman and Nicobar Islands</option>
              <option value="Chandigarh">Chandigarh</option>
              <option value="Dadra and Nagar Haveli and Daman and Diu">Dadra and Nagar Haveli and Daman and Diu</option>
              <option value="Lakshadweep">Lakshadweep</option>
              <option value="Delhi">Delhi</option>
              <option value="Puducherry">Puducherry</option>
              <option value="Ladakh">Ladakh</option>
              <option value="Jammu and Kashmir">Jammu and Kashmir</option>
            </select>
            <p class="text-red-500 text-sm mt-1 hidden" id="addStateError"></p>
          </div>
          <div>
            <label class="block text-gray-600 mb-2">Pincode</label>
            <input type="text" name="pincode"
              class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
            <p class="text-red-500 text-sm mt-1 hidden" id="addPincodeError"></p>
          </div>
          <div>
            <label class="block text-gray-600 mb-2">Phone</label>
            <input type="tel" name="phone" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
            <p class="text-red-500 text-sm mt-1 hidden" id="addPhoneError"></p>
          </div>
          <div>
            <label class="block text-gray-600 mb-2">Alternate Phone (Optional)</label>
            <input type="tel" name="alternatePhone"
              class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-primary-accent">
          </div>
        </div>
        <div class="flex justify-end space-x-4 mt-4">
          <button type="button" onclick="toggleAddAddress()"
            class="px-4 py-2 border rounded-lg hover:bg-gray-50">Cancel</button>
          <button type="button" onclick="submitAddAddress()"
            class="bg-primary-accent text-white px-4 py-2 rounded-lg hover:bg-primary-accent/90">
            Save Address
          </button>
        </div>
      </form>
    </div>
  </div>


  <script>

    function toggleAddAddress() {
      const modal = document.getElementById('addAddressModal');
      modal.classList.toggle('hidden');
      modal.classList.toggle('flex');

      // Reset form when closing
      if (modal.classList.contains('hidden')) {
        document.getElementById('addAddressForm').reset();
      }
    }
    function toggleEditAddress() {
      const modal = document.getElementById('editAddressModal');
      modal.classList.toggle('hidden');
      modal.classList.toggle('flex');

      if (modal.classList.contains('hidden')) {
        document.getElementById('editAddressForm').reset();
      }
    }
    async function editAddress(addressId) {
      try {
        const response = await axios.get(`/address/${addressId}`);
        const address = response.data.address;
        // Populate the edit form
        const form = document.getElementById('editAddressForm');
        form.querySelector('[name="addressId"]').value = addressId;
        form.querySelector('[name="name"]').value = address.name;
        form.querySelector('[name="houseName"]').value = address.houseName;
        form.querySelector('[name="localityStreet"]').value = address.localityStreet;
        form.querySelector('[name="city"]').value = address.city;
        form.querySelector('[name="state"]').value = address.state;
        form.querySelector('[name="pincode"]').value = address.pincode;
        form.querySelector('[name="phone"]').value = address.phone;
        form.querySelector('[name="alternatePhone"]').value = address.alternatePhone || '';
        // Show the edit modal
        toggleEditAddress();
      } catch (error) {
        console.error('Error fetching address:', error);
        alert('Failed to load address details');
      }
    }
    async function submitEditAddress() {
      try {
        const form = document.getElementById('editAddressForm');
        resetErrors('edit');

        const addressId = form.querySelector('[name="addressId"]').value;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        
        let hasError = false;
        
        // Name validation
        if (!data.name?.trim()) {
          showError('name', 'Name is required', 'edit');
          hasError = true;
        } else if (data.name.trim().length < 3 || data.name.trim().length > 50) {
          showError('name', 'Name must be between 3 and 50 characters', 'edit');
          hasError = true;
        }
        
        // House name validation
        if (!data.houseName?.trim()) {
          showError('houseName', 'House name is required', 'edit');
          hasError = true;
        } else if (data.houseName.trim().length < 3 || data.houseName.trim().length > 50) {
          showError('houseName', 'House name must be between 3 and 50 characters', 'edit');
          hasError = true;
        }
        
        // Locality/Street validation
        if (!data.localityStreet?.trim()) {
          showError('localityStreet', 'Locality/Street is required', 'edit');
          hasError = true;
        } else if (data.localityStreet.trim().length < 3 || data.localityStreet.trim().length > 50) {
          showError('localityStreet', 'Locality/Street must be between 3 and 50 characters', 'edit');
          hasError = true;
        }
        
        // City validation
        if (!data.city?.trim()) {
          showError('city', 'City is required', 'edit');
          hasError = true;
        } else if (data.city.trim().length < 3 || data.city.trim().length > 50) {
          showError('city', 'City must be between 3 and 50 characters', 'edit');
          hasError = true;
        }
        
        // ... rest of the validations ...
        if (!data.state) {
          showError('state', 'Please select a state', 'edit');
          hasError = true;
        }
        
        if (!data.pincode?.trim()) {
          showError('pincode', 'Pincode is required', 'edit');
          hasError = true;
        } else if (!/^\d{6}$/.test(data.pincode)) {
          showError('pincode', 'Please enter a valid 6-digit pincode', 'edit');
          hasError = true;
        }
        
        if (!data.phone?.trim()) {
          showError('phone', 'Phone number is required', 'edit');
          hasError = true;
        } else if (!/^\d{10}$/.test(data.phone)) {
          showError('phone', 'Please enter a valid 10-digit phone number', 'edit');
          hasError = true;
        }

        if (hasError) return;

        const response = await axios.put(`/address/${addressId}`, data);
        if (response.data.success) {
          // Update the address card in the DOM
          const addressCard = document.querySelector(`[data-address-id="${addressId}"]`);
          if (addressCard) {
            addressCard.innerHTML = `
              <div class="flex justify-between items-start mb-2">
                <span class="inline-block bg-gray-100 text-gray-700 px-2 py-1 rounded text-sm"></span>
                <div class="flex space-x-2">
                  <button onclick="editAddress('${addressId}')" class="text-blue-600 hover:text-blue-800">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button onclick="deleteAddress('${addressId}')" class="text-red-600 hover:text-red-800">
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>
              <p class="font-semibold">${data.name}</p>
              <p class="font-semibold">${data.houseName}</p>
              <p class="text-gray-600">${data.localityStreet}</p>
              <p class="text-gray-600">${data.city}, ${data.state}</p>
              <p class="text-gray-600">PIN: ${data.pincode}</p>
              <p class="text-gray-600">Phone: ${data.phone}</p>
            `;
          }
          
          toggleEditAddress();
          showToast('Address updated successfully', 'success');
        }
      } catch (error) {
        console.error('Edit Address Error:', error);
        const errorMessage = error.response?.data?.message || 'Failed to update address';
        showToast(errorMessage, 'error');
      }
    }
    async function deleteAddress(addressId) {
      const confirmed = await customConfirm('Are you sure you want to delete this address?');
      if (!confirmed) return;
      
      try {
        const response = await axios.delete(`/address/${addressId}`);

        if (response.data.success) {
          // Remove the address card from DOM
          const addressCard = document.querySelector(`[data-address-id="${addressId}"]`);
          if (addressCard) {
            addressCard.remove();
            
            // Update the Add Address button state
            const addressGrid = document.getElementById('address-grid');
            if (addressGrid.children.length < 5) {
              const addButton = document.querySelector('button[disabled][title="Maximum limit of 5 addresses reached"]');
              if (addButton) {
                addButton.outerHTML = `
                  <button onclick="toggleAddAddress()"
                    class="bg-primary-accent text-white px-4 py-2 rounded-lg hover:bg-primary-accent/90 w-full sm:w-auto">
                    <i class="fas fa-plus mr-2"></i> Add New Address
                  </button>
                `;
              }
            }
          }
          showToast('Address deleted successfully', 'success');
        } else {
          showToast(response.data.message || 'Failed to delete address', 'error');
        }
      } catch (error) {
        console.error('Error deleting address:', error);
        showToast('Failed to delete address', 'error');
      }
    }
    function validateAddressForm(data) {
      const trimmedData = {
        ...data,
        name: data.name.trim(),
        houseName: data.houseName.trim(),
        localityStreet: data.localityStreet.trim(),
        city: data.city.trim()
      };

      // Check for empty fields after trimming
      if (!trimmedData.name || !trimmedData.houseName || !trimmedData.localityStreet ||
        !trimmedData.city || !trimmedData.state || !trimmedData.pincode || !trimmedData.phone) {
        showToast('Please fill in all required fields', 'error');
        return false;
      }

      // Regex for alphanumeric with hyphen and space
      const alphanumericRegex = /^[a-zA-Z0-9\s-]{3,50}$/;

      // Validate name
      if (!alphanumericRegex.test(trimmedData.name)) {
        showToast('Name must be 3-50 characters long and can only contain letters, numbers, spaces, and hyphens', 'error');
        return false;
      }

      // Validate house name
      if (!alphanumericRegex.test(trimmedData.houseName)) {
        showToast('House name must be 3-50 characters long and can only contain letters, numbers, spaces, and hyphens', 'error');
        return false;
      }

      // Validate locality/street
      if (!alphanumericRegex.test(trimmedData.localityStreet)) {
        showToast('Locality/Street must be 3-50 characters long and can only contain letters, numbers, spaces, and hyphens', 'error');
        return false;
      }

      // Validate city
      if (!alphanumericRegex.test(trimmedData.city)) {
        showToast('City must be 3-50 characters long and can only contain letters, numbers, spaces, and hyphens', 'error');
        return false;
      }

      // Pincode validation (6 digits)
      if (!/^\d{6}$/.test(trimmedData.pincode)) {
        showToast('Please enter a valid 6-digit pincode', 'error');
        return false;
      }

      // Phone number validation (10 digits)
      if (!/^\d{10}$/.test(trimmedData.phone)) {
        showToast('Please enter a valid 10-digit phone number', 'error');
        return false;
      }

      if (trimmedData.alternatePhone && !/^\d{10}$/.test(trimmedData.alternatePhone)) {
        showToast('Please enter a valid 10-digit alternate phone number', 'error');
        return false;
      }

      const form = document.querySelector('#addAddressForm, #editAddressForm');
      form.querySelector('[name="name"]').value = trimmedData.name;
      form.querySelector('[name="houseName"]').value = trimmedData.houseName;
      form.querySelector('[name="localityStreet"]').value = trimmedData.localityStreet;
      form.querySelector('[name="city"]').value = trimmedData.city;

      return true;
    }
    async function submitAddAddress() {
      try {
        const form = document.getElementById('addAddressForm');
        resetErrors('add');

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        
        let hasError = false;
        
        // Name validation
        if (!data.name?.trim()) {
          showError('name', 'Name is required', 'add');
          hasError = true;
        } else if (data.name.trim().length < 3 || data.name.trim().length > 50) {
          showError('name', 'Name must be between 3 and 50 characters', 'add');
          hasError = true;
        }
        
        // House name validation
        if (!data.houseName?.trim()) {
          showError('houseName', 'House name is required', 'add');
          hasError = true;
        } else if (data.houseName.trim().length < 3 || data.houseName.trim().length > 50) {
          showError('houseName', 'House name must be between 3 and 50 characters', 'add');
          hasError = true;
        }
        
        // Locality/Street validation
        if (!data.localityStreet?.trim()) {
          showError('localityStreet', 'Locality/Street is required', 'add');
          hasError = true;
        } else if (data.localityStreet.trim().length < 3 || data.localityStreet.trim().length > 50) {
          showError('localityStreet', 'Locality/Street must be between 3 and 50 characters', 'add');
          hasError = true;
        }
        
        // City validation
        if (!data.city?.trim()) {
          showError('city', 'City is required', 'add');
          hasError = true;
        } else if (data.city.trim().length < 3 || data.city.trim().length > 50) {
          showError('city', 'City must be between 3 and 50 characters', 'add');
          hasError = true;
        }
        
        // ... rest of the validations ...
        if (!data.state) {
          showError('state', 'Please select a state', 'add');
          hasError = true;
        }
        
        if (!data.pincode?.trim()) {
          showError('pincode', 'Pincode is required', 'add');
          hasError = true;
        } else if (!/^\d{6}$/.test(data.pincode)) {
          showError('pincode', 'Please enter a valid 6-digit pincode', 'add');
          hasError = true;
        }
        
        if (!data.phone?.trim()) {
          showError('phone', 'Phone number is required', 'add');
          hasError = true;
        } else if (!/^\d{10}$/.test(data.phone)) {
          showError('phone', 'Please enter a valid 10-digit phone number', 'add');
          hasError = true;
        }

        if (hasError) return;

        const response = await axios.post('/addresses', data);
        if (response.data.success) {
          // Add the new address card to the grid
          const addressGrid = document.getElementById('address-grid');
          const newAddressCard = document.createElement('div');
          newAddressCard.className = 'border rounded-lg p-4';
          newAddressCard.setAttribute('data-address-id', response.data.address._id);
          newAddressCard.innerHTML = `
            <div class="flex justify-between items-start mb-2">
              <span class="inline-block bg-gray-100 text-gray-700 px-2 py-1 rounded text-sm"></span>
              <div class="flex space-x-2">
                <button onclick="editAddress('${response.data.address._id}')" class="text-blue-600 hover:text-blue-800">
                  <i class="fas fa-edit"></i>
                </button>
                <button onclick="deleteAddress('${response.data.address._id}')" class="text-red-600 hover:text-red-800">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </div>
            <p class="font-semibold">${data.name}</p>
            <p class="font-semibold">${data.houseName}</p>
            <p class="text-gray-600">${data.localityStreet}</p>
            <p class="text-gray-600">${data.city}, ${data.state}</p>
            <p class="text-gray-600">PIN: ${data.pincode}</p>
            <p class="text-gray-600">Phone: ${data.phone}</p>
          `;
          addressGrid.appendChild(newAddressCard);
          
          toggleAddAddress();
          showToast('Address added successfully', 'success');
          
          // Update the Add Address button state if limit reached
          if (addressGrid.children.length >= 5) {
            const addButton = document.querySelector('button[disabled][title="Maximum limit of 5 addresses reached"]');
            if (addButton) {
              addButton.outerHTML = `
                <button class="bg-gray-400 text-white px-4 py-2 rounded-lg cursor-not-allowed w-full sm:w-auto" disabled
                  title="Maximum limit of 5 addresses reached">
                  <i class="fas fa-plus mr-2"></i> Add New Address
                </button>
              `;
            }
          }
        }
      } catch (error) {
        console.error('Add Address Error:', error);
        const errorMessage = error.response?.data?.message || 'Failed to add address';
        showToast(errorMessage, 'error');
      }
    }
    document.getElementById('addAddressModal').addEventListener('click', function (e) {
      if (e.target === this) {
        toggleAddAddress();
      }
    });
    document.getElementById('editAddressModal').addEventListener('click', function (e) {
      if (e.target === this) {
        toggleEditAddress();
      }
    });
    function checkAddressLimit() {
      const addressCount = document.querySelectorAll('.border.rounded-lg.p-4').length;
      return addressCount >= 5;
    }
    function showError(fieldId, message, formType) {
      const errorId = `${formType}${fieldId.charAt(0).toUpperCase() + fieldId.slice(1)}Error`;
      const input = document.querySelector(`#${formType}AddressForm [name="${fieldId}"]`);
      const errorElement = document.getElementById(errorId);
      
      if (input && errorElement) {
        input.classList.add('border-red-500');
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
      } else {
        console.error(`Element not found: input=${fieldId}, error=${errorId}`);
      }
    }
    function resetErrors(formType) {
      const form = document.getElementById(`${formType}AddressForm`);
      const inputs = form.querySelectorAll('input, select');
      inputs.forEach(input => {
        input.classList.remove('border-red-500');
        const fieldName = input.getAttribute('name');
        const errorId = `${formType}${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}Error`;
        const errorElement = document.getElementById(errorId);
        if (errorElement) {
          errorElement.classList.add('hidden');
          errorElement.textContent = '';
        }
      });
    }
    document.querySelectorAll('#addAddressForm input, #addAddressForm select').forEach(input => {
      input.addEventListener('input', function() {
        this.classList.remove('border-red-500');
        const errorId = `add${this.name.charAt(0).toUpperCase() + this.name.slice(1)}Error`;
        const errorElement = document.getElementById(errorId);
        if (errorElement) {
          errorElement.classList.add('hidden');
        }
      });
    });
    document.querySelectorAll('#editAddressForm input, #editAddressForm select').forEach(input => {
      input.addEventListener('input', function() {
        this.classList.remove('border-red-500');
        const errorId = `edit${this.name.charAt(0).toUpperCase() + this.name.slice(1)}Error`;
        const errorElement = document.getElementById(errorId);
        if (errorElement) {
          errorElement.classList.add('hidden');
        }
      });
    });
    function addInputListeners(formType) {
      const form = document.getElementById(`${formType}AddressForm`);
      const inputs = form.querySelectorAll('input, select');
      
      inputs.forEach(input => {
        input.addEventListener('input', function() {
          this.classList.remove('border-red-500');
          const fieldName = this.getAttribute('name');
          const errorId = `${formType}${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}Error`;
          const errorElement = document.getElementById(errorId);
          if (errorElement) {
            errorElement.classList.add('hidden');
          }
        });
      });
    }
    document.addEventListener('DOMContentLoaded', function() {
      addInputListeners('add');
      addInputListeners('edit');
    });
  </script>
  <%- include('../../partials/footer') %>