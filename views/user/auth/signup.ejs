<%- include('../../partials/authheader') %>

  <main class="py-8 flex justify-center items-center min-h-[70vh]">
    <div class="bg-primary-white rounded-lg shadow-lg flex flex-col lg:flex-row overflow-hidden max-w-4xl w-full">
      <!-- Image Section -->
      <div class="bg-blue-100 p-6 hidden sm:flex justify-center items-center lg:w-1/2">
        <img alt="Illustration of a laptop with a clock display and office supplies" src="./images/login2.png"
          class="object-cover max-w-full h-auto" />
      </div>
      <!-- Form Section -->
      <div class="bg-gray-50 p-4 md:p-8 flex-1">
        <form action="/auth/google">
          <button type="submit"
            class="flex border items-center justify-center rounded-md py-2 mb-4 bg-white text-black w-full">
            <img alt="Google logo" src="images/google.svg" class="mr-3" />
            Sign Up with Google
          </button>
        </form>
        <form id="signupForm" method="post" action="/signup" class="space-y-3" novalidate>
          <p class="text-2xl font-semibold text-gray-800 mb-1">Create an Account</p>
          <p class="text-gray-600 mb-4">Enter your details below</p>
          
          <div class="mb-3">
            <input type="text" id="fullname" placeholder="Full Name" 
              value="<%= locals.fullname ? fullname : '' %>"
              name="fullname" 
              class="border w-full px-3 py-2 rounded-md transition-colors" />
            <p class="text-red-500 text-sm mt-1 hidden" id="fullnameError"></p>
          </div>

          <div class="mb-3">
            <input type="tel" id="phonenumber" placeholder="Phone Number"
              value="<%= locals.phonenumber ? phonenumber : '' %>"
              name="phonenumber" 
              class="border w-full px-3 py-2 rounded-md transition-colors" />
            <p class="text-red-500 text-sm mt-1 hidden" id="phonenumberError"></p>
          </div>

          <div class="mb-3">
            <input type="email" id="email" placeholder="Email"
              value="<%= locals.email ? email : '' %>"
              name="email" 
              class="border w-full px-3 py-2 rounded-md transition-colors" />
            <p class="text-red-500 text-sm mt-1 hidden" id="emailError"></p>
          </div>

          <div class="relative w-full mb-3">
            <div class="relative">
              <input type="password" id="password" placeholder="Password" name="password"
                class="border w-full px-3 py-2 rounded-md pr-10 transition-colors" />
              <span class="absolute inset-y-0 right-3 flex items-center cursor-pointer text-gray-600" id="togglePassword">
                <i class="fas fa-eye"></i>
              </span>
            </div>
            <p class="text-red-500 text-sm mt-1 hidden" id="passwordError"></p>
          </div>

          <div class="relative w-full mb-3">
            <div class="relative">
              <input type="password" id="confirmPassword" placeholder="Confirm Password" name="confirmPassword"
                class="border w-full px-3 py-2 rounded-md pr-10 transition-colors" />
              <span class="absolute inset-y-0 right-3 flex items-center cursor-pointer text-gray-600" id="toggleConfirmPassword">
                <i class="fas fa-eye"></i>
              </span>
            </div>
            <p class="text-red-500 text-sm mt-1 hidden" id="confirmPasswordError"></p>
          </div>

          <p class="text-xs text-gray-500 mb-3">
            Password must contain at least 8 characters, including uppercase, lowercase letters, numbers, and special
            characters.
          </p>
          <% if (locals.message && locals.alertType) { %>
            <div id="alertMessage" class="mb-4 p-3 rounded-md 
               <%= alertType === 'error' ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700' %>">
              <%= message %>
            </div>
            <% } %>
              <button type="submit" id="signupButton"
                class="w-full py-2 mb-2 text-white bg-primary-accent rounded-md flex items-center justify-center">
                <span>Sign Up</span>
                <div id="signupLoader" class="hidden ml-2">
                  <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                </div>
              </button>
        </form>
        <a href="/login" class="text-right text-sm text-primary-accent block">Already have an account? Login</a>
      </div>
    </div>
  </main>
  <%- include('../../partials/authfooter') %>

    <div id="otpModal" class="fixed inset-0 bg-black bg-opacity-50 hidden justify-center items-center">
      <div class="bg-primary-white rounded-lg shadow-lg max-w-md w-full p-6">
        <div class="bg-gray-50 flex flex-col items-center text-center">
          <p class="text-2xl font-semibold text-gray-800 mb-4">OTP Verification</p>
          <p class="text-gray-600 mb-2">Enter the 4-digit verification code sent to</p>
          <p class="text-primary-accent font-medium mb-4" id="otpEmail"></p>

          <div class="flex gap-2 mb-6">
            <input type="text" maxlength="1" class="otp-input w-12 h-12 border text-center text-xl rounded-md"
              name="otp1" />
            <input type="text" maxlength="1" class="otp-input w-12 h-12 border text-center text-xl rounded-md"
              name="otp2" />
            <input type="text" maxlength="1" class="otp-input w-12 h-12 border text-center text-xl rounded-md"
              name="otp3" />
            <input type="text" maxlength="1" class="otp-input w-12 h-12 border text-center text-xl rounded-md"
              name="otp4" />
          </div>

          <div id="otpAlertMessage" class="mb-4 p-3 rounded-md hidden"></div>
          <div id="warningMessage" class="mb-4 p-3 rounded-md bg-red-100 text-red-700" style="display: none;">
            OTP expired
          </div>

          <button type="button" id="verifyOtpButton"
            class="w-full py-2 mb-4 text-white bg-primary-accent rounded-md flex items-center justify-center">
            <span>Verify Code</span>
            <div id="verifyLoader" class="hidden ml-2">
              <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
            </div>
          </button>

          <div class="text-center">
            <div class="flex items-center justify-center">
              <span class="text-gray-600">Didn't receive code?</span>
              <button id="resendButton" type="button"
                class="text-primary-accent ml-2 flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
                disabled>
                <span>Resend OTP</span>
                <div id="resendLoader" class="hidden ml-2">
                  <div class="w-4 h-4 border-2 border-primary-accent border-t-transparent rounded-full animate-spin">
                  </div>
                </div>
              </button>
            </div>
            <p id="timer" class="mt-2 text-gray-600">You can resend OTP in: 1:00</p>
          </div>
        </div>
      </div>
    </div>

    <div id="referralModal" class="fixed inset-0 bg-black bg-opacity-50 hidden justify-center items-center">
      <div class="bg-primary-white rounded-lg shadow-lg max-w-md w-full p-6">
        <div class="bg-gray-50 flex flex-col items-center text-center">
          <p class="text-2xl font-semibold text-gray-800 mb-4">Enter Referral Code</p>
          <p class="text-gray-600 mb-4">Have a referral code? Enter it below to get rewards!</p>
          
          <input type="text" id="referralCode" placeholder="Enter referral code" 
            class="border w-full mb-4 px-3 py-2 rounded-md uppercase" />
          
          <div id="referralAlertMessage" class="mb-4 p-3 rounded-md hidden"></div>

          <div class="flex gap-3 w-full">
            <button type="button" id="skipReferral"
              class="w-1/2 py-2 text-gray-600 bg-gray-200 rounded-md">
              Skip
            </button>
            <button type="button" id="applyReferral"
              class="w-1/2 py-2 text-white bg-primary-accent rounded-md flex items-center justify-center">
              <span>Apply</span>
              <div id="referralLoader" class="hidden ml-2">
                <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              </div>
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>

      document.getElementById('signupForm').addEventListener('submit', async function (event) {
        event.preventDefault();
        
        // Reset all error states
        resetErrors();

        const fullname = document.getElementById('fullname').value.trim();
        const phonenumber = document.getElementById('phonenumber').value.trim();
        const email = document.getElementById('email').value.trim();
        const password = document.getElementById('password').value.trim();
        const confirmPassword = document.getElementById('confirmPassword').value.trim();

        let hasError = false;

        // Validate fullname
        if (!fullname) {
          showError('fullname', 'Full name is required');
          hasError = true;
        } else if (!/^[a-zA-Z ]{3,30}$/.test(fullname)) {
          showError('fullname', 'Full name should contain only alphabets (3-30 characters)');
          hasError = true;
        }

        // Validate phone number
        if (!phonenumber) {
          showError('phonenumber', 'Phone number is required');
          hasError = true;
        } else if (!/^\d{10}$/.test(phonenumber)) {
          showError('phonenumber', 'Phone number must be 10 digits');
          hasError = true;
        }

        // Validate email
        if (!email) {
          showError('email', 'Email is required');
          hasError = true;
        } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
          showError('email', 'Please enter a valid email address');
          hasError = true;
        }

        // Validate password
        if (!password) {
          showError('password', 'Password is required');
          hasError = true;
        } else {
          // Check password length
          const hasMinLength = password.length >= 8;
          // Check for uppercase letter
          const hasUpperCase = /[A-Z]/.test(password);
          // Check for lowercase letter
          const hasLowerCase = /[a-z]/.test(password);
          // Check for number
          const hasNumber = /\d/.test(password);
          // Check for special character
          const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);

          if (!hasMinLength || !hasUpperCase || !hasLowerCase || !hasNumber || !hasSpecialChar) {
            showError('password', 'Password must contain at least 8 characters, including uppercase, lowercase letters, numbers, and special characters');
            hasError = true;
          }
        }

        // Validate confirm password
        if (!confirmPassword) {
          showError('confirmPassword', 'Please confirm your password');
          hasError = true;
        } else if (password !== confirmPassword) {
          showError('confirmPassword', 'Passwords do not match');
          hasError = true;
        }

        if (hasError) return;

        const signupButton = document.getElementById('signupButton');
        const signupLoader = document.getElementById('signupLoader');
        const buttonText = signupButton.querySelector('span');

        try {
          buttonText.textContent = 'Signing up...';
          signupLoader.classList.remove('hidden');
          signupButton.disabled = true;

          const response = await axios.post('/signup', {
            fullname,
            phonenumber,
            email,
            password,
            confirmPassword
          });

          if (response.data.success) {
            showOtpModal(response.data.email);
          }
        } catch (error) {
          const errorMessage = error.response?.data?.message || 'Signup failed';
          showToast(errorMessage, 'error');
        } finally {
          buttonText.textContent = 'Sign Up';
          signupLoader.classList.add('hidden');
          signupButton.disabled = false;
        }
      });

      function showError(fieldId, message) {
        const input = document.getElementById(fieldId);
        const errorElement = document.getElementById(`${fieldId}Error`);
        
        input.classList.add('border-red-500');
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
      }

      function resetErrors() {
        const fields = ['fullname', 'phonenumber', 'email', 'password', 'confirmPassword'];
        fields.forEach(field => {
          const input = document.getElementById(field);
          const errorElement = document.getElementById(`${field}Error`);
          
          input.classList.remove('border-red-500');
          errorElement.classList.add('hidden');
          errorElement.textContent = '';
        });
      }

      // Add input event listeners to clear errors when user starts typing
      ['fullname', 'phonenumber', 'email', 'password', 'confirmPassword'].forEach(field => {
        document.getElementById(field).addEventListener('input', function() {
          this.classList.remove('border-red-500');
          document.getElementById(`${field}Error`).classList.add('hidden');
        });
      });

      // Toggle password visibility
      function togglePasswordVisibility(inputId, toggleId) {
        const input = document.getElementById(inputId);
        const toggle = document.getElementById(toggleId);
        const icon = toggle.querySelector('i');

        toggle.addEventListener('click', () => {
          if (input.type === 'password') {
            input.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
          } else {
            input.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
          }
        });
      }

      // Initialize toggle for both password fields
      togglePasswordVisibility('password', 'togglePassword');
      togglePasswordVisibility('confirmPassword', 'toggleConfirmPassword');

      // otp verification 
      let timeLeft = 60;
      let countdownTimer;

      function showOtpModal(email) {
        document.getElementById('otpModal').classList.replace("hidden", "flex");
        document.getElementById('otpEmail').textContent = email;
        // Reset timer value
        timeLeft = 60;
        document.getElementById('timer').textContent = 'You can resend OTP in: 1:00';
        document.getElementById('timer').style.display = 'block';
        document.getElementById('warningMessage').style.display = 'none';

        // Reset OTP fields
        otpInputs.forEach(input => {
          input.value = '';
          input.disabled = false;
        });

        // Reset alert message
        document.getElementById('otpAlertMessage').classList.add('hidden');

        // Clear timer
        if (countdownTimer) {
          clearInterval(countdownTimer);
        }

        // Start timer
        startTimer();
      }

      function startTimer() {
        resendButton.disabled = true;
        resendButton.style.cursor = 'not-allowed';

        countdownTimer = setInterval(function () {
          timeLeft--;
          let minutes = Math.floor(timeLeft / 60);
          let seconds = timeLeft % 60;
          document.getElementById('timer').textContent =
            `You can resend OTP in: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;

          if (timeLeft <= 0) {
            clearInterval(countdownTimer);
            resendButton.disabled = false;
            resendButton.style.cursor = 'pointer';
            document.querySelectorAll('.otp-input').forEach(input => {
              input.disabled = true;
            });
            document.getElementById('warningMessage').style.display = 'block';
            document.getElementById('timer').style.display = 'none';
          }
        }, 1000);
      }

      // OTP Input Navigation
      const otpInputs = document.querySelectorAll('.otp-input');
      otpInputs.forEach((input, index) => {
        input.addEventListener('input', (event) => {
          const current = event.target;
          const next = otpInputs[index + 1];
          current.value = current.value.replace(/[^0-9]/g, '');
          if (current.value.length === 1 && next) {
            next.focus();
          }
        });

        input.addEventListener('keydown', (e) => {
          if (e.key === 'Backspace') {
            const prev = otpInputs[index - 1];
            if (input.value === '' && prev) {
              e.preventDefault();
              prev.value = '';
              prev.focus();
            }
          }
        });
      });

      function closeOtpModal() {
        document.getElementById('otpModal').classList.replace('flex', "hidden");
        // Clear  timer
        if (countdownTimer) {
          clearInterval(countdownTimer);
        }
        // Reset all OTP inputs and states
        otpInputs.forEach(input => {
          input.value = '';
          input.disabled = false;
        });
        document.getElementById('warningMessage').style.display = 'none';
        document.getElementById('timer').style.display = 'block';
        document.getElementById('otpAlertMessage').classList.add('hidden');

        // Reset the signup form
        document.getElementById('signupForm').reset();
      }

      //  function to clear OTP fields
      function clearOtpFields() {
        otpInputs.forEach(input => {
          input.value = '';
        });
        // Focus on first input
        otpInputs[0].focus();
      }

      // Update the verify OTP event listener
      document.getElementById('verifyOtpButton').addEventListener('click', async () => {
        const verifyButton = document.getElementById('verifyOtpButton');
        const verifyLoader = document.getElementById('verifyLoader');
        const buttonText = verifyButton.querySelector('span');

        try {
          // Show loading state
          buttonText.textContent = 'Verifying...';
          verifyLoader.classList.remove('hidden');
          verifyButton.disabled = true;

          const otp = Array.from(otpInputs).map(input => input.value).join('');
          const email = document.getElementById('otpEmail').textContent;

          const response = await axios.post('/verify-otp', {
            otp1: otp[0],
            otp2: otp[1],
            otp3: otp[2],
            otp4: otp[3],
            email,
            timeRem: timeLeft
          });

          if (response.data.success) {
            document.getElementById('otpModal').classList.replace("flex", "hidden");
            document.getElementById('referralModal').classList.replace("hidden", "flex");
          }
        } catch (error) {
          const alertMessage = document.getElementById('otpAlertMessage');
          alertMessage.textContent = error.response?.data?.message || 'Verification failed';
          alertMessage.classList.remove('hidden');
          alertMessage.classList.add('bg-red-100', 'text-red-700');

          clearOtpFields();

          if (error.response?.data?.maxAttemptsExceeded) {
              closeOtpModal();
              showToast('Maximum attempts exceeded. Please sign up again.', 'error');
          }
        } finally {
          // Reset loading state
          buttonText.textContent = 'Verify Code';
          verifyLoader.classList.add('hidden');
          verifyButton.disabled = false;
        }
      });

      //  resend OTP event listener
      document.getElementById('resendButton').addEventListener('click', async () => {
        const email = document.getElementById('otpEmail').textContent;
        const resendButton = document.getElementById('resendButton');
        const resendLoader = document.getElementById('resendLoader');
        const buttonText = resendButton.querySelector('span');

        try {
          // Show loading state
          buttonText.textContent = 'Sending...';
          resendLoader.classList.remove('hidden');
          resendButton.disabled = true;

          const response = await axios.post('/resend-otp', { email });
          if (response.data.success) {
            timeLeft = 60;
            document.getElementById('timer').textContent = 'You can resend OTP in: 1:00';
            document.getElementById('warningMessage').style.display = 'none';
            document.getElementById('timer').style.display = 'block';

            clearOtpFields();
            otpInputs.forEach(input => {
              input.disabled = false;
            });

            if (countdownTimer) {
              clearInterval(countdownTimer);
            }

            startTimer();

            const alertMessage = document.getElementById('otpAlertMessage');
            alertMessage.textContent = response.data.message;
            alertMessage.classList.remove('hidden', 'bg-red-100', 'text-red-700');
            alertMessage.classList.add('bg-green-100', 'text-green-700');
          }
        } catch (error) {
          const alertMessage = document.getElementById('otpAlertMessage');
          alertMessage.textContent = error.response?.data?.message || 'Failed to resend OTP';
          alertMessage.classList.remove('hidden', 'bg-green-100', 'text-green-700');
          alertMessage.classList.add('bg-red-100', 'text-red-700');

          if (error.response?.data?.maxAttemptsExceeded) {
            alertMessage.textContent = 'Maximum resend attempts exceeded. Please sign up again.';
              closeOtpModal();
              showToast('Maximum resend attempts exceeded. Please sign up again.', 'error');
          }
        } finally {
          buttonText.textContent = 'Resend OTP';
          resendLoader.classList.add('hidden');
        }
      });

      document.getElementById('skipReferral').addEventListener('click', () => {
        window.location.href = '/home';
      });

      document.getElementById('applyReferral').addEventListener('click', async () => {
        const referralButton = document.getElementById('applyReferral');
        const referralLoader = document.getElementById('referralLoader');
        const buttonText = referralButton.querySelector('span');
        const alertMessage = document.getElementById('referralAlertMessage');
        const code = document.getElementById('referralCode').value.trim().toUpperCase();

        if (!code) {
          alertMessage.textContent = 'Please enter a referral code';
          alertMessage.classList.remove('hidden', 'bg-green-100', 'text-green-700');
          alertMessage.classList.add('bg-red-100', 'text-red-700');
          return;
        }

        try {
          buttonText.textContent = 'Applying...';
          referralLoader.classList.remove('hidden');
          referralButton.disabled = true;

          const response = await axios.post('/apply-referral', { referralCode: code });

          if (response.data.success) {
            window.location.href = '/home';
          }
        } catch (error) {
          alertMessage.textContent = error.response?.data?.message || 'Failed to apply referral code';
          alertMessage.classList.remove('hidden', 'bg-green-100', 'text-green-700');
          alertMessage.classList.add('bg-red-100', 'text-red-700');
        } finally {
          buttonText.textContent = 'Apply';
          referralLoader.classList.add('hidden');
          referralButton.disabled = false;
        }
      });

    </script>