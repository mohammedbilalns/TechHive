<%- include('../../partials/authheader') %>
  <main class="py-12 flex flex-1 flex-col justify-center items-center">
    <div class="bg-primary-white rounded-lg shadow-lg max-w-lg w-full p-8">
      <div class="bg-gray-50 flex flex-col items-center text-center">
        <form id="forgotPasswordForm" onsubmit="return validateEmail()">
          <p class="text-2xl font-semibold text-gray-800 mb-6">Forgot Password?</p>
          <p class="text-gray-600 mb-8">Enter your email to reset your password</p>
          <input type="text" id="email" name="email" placeholder="Enter your email"
            value="<% locals.email ? locals.email: '' %>" class="border w-full mb-8 px-4 py-3 rounded-md text-lg" />
          <button type="submit" id="submitButton"
            class="w-full py-3 mb-6 text-white bg-primary-accent rounded-md flex items-center justify-center text-lg">
            <span>Send Reset OTP</span>
            <div id="submitLoader" class="hidden ml-2">
              <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
            </div>
          </button>
        </form>

        <a href="/login" class="text-primary-accent text-lg">Back to Login</a>
      </div>
    </div>
  </main>
  <!-- OTP Modal -->
  <div id="otpModal" class="fixed inset-0 bg-black bg-opacity-50 hidden justify-center items-center">
    <div class="bg-primary-white rounded-lg shadow-lg max-w-md w-full p-6">
      <div class="bg-gray-50 flex flex-col items-center text-center">
        <p class="text-2xl font-semibold text-gray-800 mb-4">OTP Verification</p>
        <p class="text-gray-600 mb-2">Enter the 4-digit verification code sent to</p>
        <p class="text-primary-accent font-medium mb-4" id="otpEmail"></p>

        <form id="otpForm">
          <input type="hidden" name="email" id="hiddenEmail" />
          <div class="flex gap-2 mb-6">
            <input type="text" maxlength="1" class="otp-input w-12 h-12 border text-center text-xl rounded-md"
              name="otp1" />
            <input type="text" maxlength="1" class="otp-input w-12 h-12 border text-center text-xl rounded-md"
              name="otp2" />
            <input type="text" maxlength="1" class="otp-input w-12 h-12 border text-center text-xl rounded-md"
              name="otp3" />
            <input type="text" maxlength="1" class="otp-input w-12 h-12 border text-center text-xl rounded-md"
              name="otp4" />
          </div>
          <div id="otpAlertMessage" class="mb-4 p-3 rounded-md hidden"></div>
          <div id="warningMessage" class="mb-4 p-3 rounded-md bg-red-100 text-red-700" style="display: none;">
            OTP expired
          </div>
          <button type="submit" id="verifyOtpButton"
            class="w-full py-2 mb-4 text-white bg-primary-accent rounded-md flex items-center justify-center">
            <span>Verify Code</span>
            <div id="verifyLoader" class="hidden ml-2">
              <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
            </div>
          </button>
        </form>
        <div class="text-center">
          <div class="flex items-center justify-center">
            <span class="text-gray-600">Didn't receive code?</span>
            <button id="resendButton" type="button"
              class="text-primary-accent ml-2 flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
              disabled>
              <span>Resend OTP</span>
              <div id="resendLoader" class="hidden ml-2">
                <div class="w-4 h-4 border-2 border-primary-accent border-t-transparent rounded-full animate-spin">
                </div>
              </div>
            </button>
          </div>
          <p id="timer" class="mt-2 text-gray-600">You can resend OTP in: 1:00</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Reset Password Modal -->
  <div id="resetPasswordModal" class="fixed inset-0 bg-black bg-opacity-50 hidden justify-center items-center">
    <div class="bg-primary-white rounded-lg shadow-lg max-w-md w-full p-6">
      <div class="bg-gray-50 flex flex-col items-center text-center">
        <p class="text-2xl font-semibold text-gray-800 mb-4">Reset Password</p>
        <p class="text-gray-600 mb-6">Enter your new password</p>

        <form id="resetPasswordForm" class="w-full">
          <input type="hidden" id="resetEmail" name="email" />
          <div class="relative w-full mb-4">
            <input type="password" id="newPassword" name="newPassword" placeholder="New Password"
              class="border w-full px-3 py-2 rounded-md pr-10" />
            <span class="absolute inset-y-0 right-3 flex items-center cursor-pointer text-gray-600"
              id="toggleNewPassword">
              <i class="fas fa-eye"></i>
            </span>
          </div>
          <div class="relative w-full mb-4">
            <input type="password" id="confirmPassword" name="password" placeholder="Confirm New Password"
              class="border w-full px-3 py-2 rounded-md pr-10" />
            <span class="absolute inset-y-0 right-3 flex items-center cursor-pointer text-gray-600"
              id="toggleConfirmPassword">
              <i class="fas fa-eye"></i>
            </span>
          </div>

          <p class="text-xs text-gray-500 mt-2 mb-6">
            Password must contain at least 8 characters, including uppercase, lowercase letters, numbers, and special
            characters.
          </p>

          <div id="resetPasswordError" class="text-red-700 bg-red-100 p-3 mb-4 rounded-md hidden"></div>

          <button type="submit" id="resetPasswordButton"
            class="w-full py-2 mb-4 text-white bg-primary-accent rounded-md flex items-center justify-center">
            <span>Reset Password</span>
            <div id="resetLoader" class="hidden ml-2">
              <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
            </div>
          </button>
        </form>
      </div>
    </div>
  </div>

  <script>
    let timeLeft = 60;
    let countdownTimer;

    document.getElementById('forgotPasswordForm').addEventListener('submit', async function (event) {
      event.preventDefault();

      const submitButton = document.getElementById('submitButton');
      const submitLoader = document.getElementById('submitLoader');
      const buttonText = submitButton.querySelector('span');

      try {
        buttonText.textContent = 'Sending...';
        submitLoader.classList.remove('hidden');
        submitButton.disabled = true;

        const email = document.getElementById('email').value.trim();
        const response = await axios.post('/forgot-password', { email });

        if (response.data.success) {
          showOtpModal(email);
        }
      } catch (error) {
        const message = error.response?.data?.message || 'Failed to send OTP';
        showToast(message, 'error');
      } finally {
        buttonText.textContent = 'Send Reset OTP';
        submitLoader.classList.add('hidden');
        submitButton.disabled = false;
      }
    });

    function showOtpModal(email) {
      document.getElementById('otpModal').classList.replace('hidden', 'flex');
      document.getElementById('otpEmail').textContent = email;
      document.getElementById('hiddenEmail').value = email;

      const verifyButton = document.getElementById('verifyOtpButton');
      verifyButton.disabled = false;
      verifyButton.classList.remove('opacity-50', 'cursor-not-allowed');

      timeLeft = 60;
      document.getElementById('timer').textContent = 'You can resend OTP in: 1:00';
      document.getElementById('timer').style.display = 'block';
      document.getElementById('warningMessage').style.display = 'none';

      otpInputs.forEach(input => {
        input.value = '';
        input.disabled = false;
      });

      document.getElementById('otpAlertMessage').classList.add('hidden');

      if (countdownTimer) {
        clearInterval(countdownTimer);
      }

      startTimer();
    }
    document.getElementById('otpForm').addEventListener('submit', async function (event) {
      event.preventDefault();

      const verifyButton = document.getElementById('verifyOtpButton');
      const verifyLoader = document.getElementById('verifyLoader');
      const buttonText = verifyButton.querySelector('span');
      const otpAlertMessage = document.getElementById('otpAlertMessage');

      try {
        buttonText.textContent = 'Verifying...';
        verifyLoader.classList.remove('hidden');
        verifyButton.disabled = true;

        const otp = Array.from(otpInputs).map(input => input.value).join('');
        const email = document.getElementById('hiddenEmail').value;

        const response = await axios.post('/verify-forgot-password-otp', {
          otp1: otp[0],
          otp2: otp[1],
          otp3: otp[2],
          otp4: otp[3],
          email,
          timeRem: timeLeft
        });

        if (response.data.success) {
          // Hide OTP modal and show reset password modal
          document.getElementById('otpModal').classList.replace('flex', 'hidden');
          document.getElementById('resetPasswordModal').classList.replace('hidden', 'flex');
          document.getElementById('resetEmail').value = email;
        }
      } catch (error) {
        const message = error.response?.data?.message || 'Verification failed';
        clearOtpFields();
        otpAlertMessage.textContent = message;
        otpAlertMessage.classList.remove('hidden', 'bg-green-100', 'text-green-700');
        otpAlertMessage.classList.add('bg-red-100', 'text-red-700');

        if (error.response?.data?.maxAttemptsExceeded) {

          closeOtpModal();
          showToast('Maximum attempts exceeded. Please try again.', 'error');

        }
      } finally {
        buttonText.textContent = 'Verify Code';
        verifyLoader.classList.add('hidden');
        verifyButton.disabled = false;
      }
    });

    function startTimer() {
      const resendButton = document.getElementById('resendButton');
      const verifyButton = document.getElementById('verifyOtpButton');
      resendButton.disabled = true;
      resendButton.style.cursor = 'not-allowed';

      countdownTimer = setInterval(function () {
        timeLeft--;
        let minutes = Math.floor(timeLeft / 60);
        let seconds = timeLeft % 60;
        document.getElementById('timer').textContent =
          `You can resend OTP in: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;

        if (timeLeft <= 0) {
          clearInterval(countdownTimer);
          resendButton.disabled = false;
          resendButton.style.cursor = 'pointer';
          document.querySelectorAll('.otp-input').forEach(input => {
            input.disabled = true;
          });
          verifyButton.disabled = true;
          verifyButton.classList.add('opacity-50', 'cursor-not-allowed');
          document.getElementById('warningMessage').style.display = 'block';
          document.getElementById('timer').style.display = 'none';
        }
      }, 1000);
    }

    // OTP Input Navigation
    const otpInputs = document.querySelectorAll('.otp-input');
    otpInputs.forEach((input, index) => {
      input.addEventListener('input', (event) => {
        const current = event.target;
        const next = otpInputs[index + 1];
        const prev = otpInputs[index - 1];
        current.value = current.value.replace(/[^0-9]/g, '');

        if (current.value.length === 1 && next) {
          next.focus();
        }
      });

      input.addEventListener('keydown', (e) => {
        const current = e.target;
        const prev = otpInputs[index - 1];
        if (e.key === 'Backspace') {
          if (current.value === '' && prev) {
            e.preventDefault();
            prev.value = '';
            prev.focus();
          } else {
            current.value = '';
          }
        }
      });
    });

    //  resend OTP functionality
    document.getElementById('resendButton').addEventListener('click', async () => {
      const email = document.getElementById('hiddenEmail').value;
      const resendButton = document.getElementById('resendButton');
      const resendLoader = document.getElementById('resendLoader');
      const buttonText = resendButton.querySelector('span');

      try {
        buttonText.textContent = 'Sending...';
        resendLoader.classList.remove('hidden');
        resendButton.disabled = true;

        const response = await axios.post('/forgot-password', { email });

        if (response.data.success) {
          timeLeft = 60;
          document.getElementById('timer').textContent = 'You can resend OTP in: 1:00';
          document.getElementById('warningMessage').style.display = 'none';
          document.getElementById('timer').style.display = 'block';

          // Re-enable verify button and remove disabled styling
          const verifyButton = document.getElementById('verifyOtpButton');
          verifyButton.disabled = false;
          verifyButton.classList.remove('opacity-50', 'cursor-not-allowed');

          clearOtpFields();
          otpInputs.forEach(input => {
            input.disabled = false;
          });

          if (countdownTimer) {
            clearInterval(countdownTimer);
          }

          startTimer();

          const alertMessage = document.getElementById('otpAlertMessage');
          alertMessage.textContent = 'OTP sent successfully';
          alertMessage.classList.remove('hidden', 'bg-red-100', 'text-red-700');
          alertMessage.classList.add('bg-green-100', 'text-green-700');
        }
      } catch (error) {
        const alertMessage = document.getElementById('otpAlertMessage');
        alertMessage.textContent = error.response?.data?.message || 'Failed to resend OTP';
        alertMessage.classList.remove('hidden', 'bg-green-100', 'text-green-700');
        alertMessage.classList.add('bg-red-100', 'text-red-700');
      } finally {
        buttonText.textContent = 'Resend OTP';
        resendLoader.classList.add('hidden');
      }
    });

    //  function to clear OTP fields
    function clearOtpFields() {
      otpInputs.forEach(input => {
        input.value = '';
      });
      otpInputs[0].focus();
    }

    // Add email validation function
    function validateEmail() {
      const email = document.getElementById('email').value;
      const errorMessage = document.getElementById('error-message');
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

      if (!emailRegex.test(email)) {
        errorMessage.style.display = 'block';
        return false;
      }
      errorMessage.style.display = 'none';
      return true;
    }

    // Add alert function
    function showToast(message, type) {
      const alertMessage = document.getElementById('alertMessage');
      if (alertMessage) {
        alertMessage.textContent = message;
        alertMessage.className = `mb-4 p-3 rounded-md ${type === 'error' ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'
          }`;
        alertMessage.style.display = 'block';
      }
    }

    // Add close modal function
    function closeOtpModal() {
      document.getElementById('otpModal').classList.replace('flex', 'hidden');
      if (countdownTimer) {
        clearInterval(countdownTimer);
      }
      otpInputs.forEach(input => {
        input.value = '';
        input.disabled = false;
      });
      document.getElementById('warningMessage').style.display = 'none';
      document.getElementById('timer').style.display = 'block';
      document.getElementById('otpAlertMessage').classList.add('hidden');
    }

    // Add password reset form handler
    document.getElementById('resetPasswordForm').addEventListener('submit', async function (event) {
      event.preventDefault();

      const resetButton = document.getElementById('resetPasswordButton');
      const resetLoader = document.getElementById('resetLoader');
      const buttonText = resetButton.querySelector('span');

      const email = document.getElementById('resetEmail').value.trim();
      const newPassword = document.getElementById('newPassword').value.trim();
      const confirmPassword = document.getElementById('confirmPassword').value.trim();

      try {
        buttonText.textContent = 'Resetting...';
        resetLoader.classList.remove('hidden');
        resetButton.disabled = true;

        const response = await axios.patch('/reset-password', {
          email,
          password: newPassword,
          confirmPassword
        });

        if (response.data.success) {
          window.location.href = '/login?message=Password+reset+successful&alertType=success';
        }
      } catch (error) {
        const message = error.response?.data?.message || 'Failed to reset password';
        showToast(message, 'error');
      } finally {
        buttonText.textContent = 'Reset Password';
        resetLoader.classList.add('hidden');
        resetButton.disabled = false;
      }
    });
    //  toggle password visibility 
    togglePasswordVisibility('newPassword', 'toggleNewPassword');
    togglePasswordVisibility('confirmPassword', 'toggleConfirmPassword');
  </script>
  <%- include('../../partials/authfooter') %>